This file includes a list of the classes and function/method definitions for the CNST Nanolithography Toolbox.
This file was generated with the following script:



#!/bin/bash
# Set the JAR name
jar=/home/nathan/Downloads/CNSTNanolithographyToolboxV2016.10.01/CNSTNanolithographyToolboxV2016.10.01.jar
# Loop through the classes (everything ending in .class)
for class in $(jar -tf $jar | grep '.class'); do 
    # Replace /'s with .'s
    class=${class//\//.};
    # javap
    javap -classpath $jar ${class//.class/};





Compiled from "AlignTest.java"
public class AlignTest implements JGDS2.Constants {
  public AlignTest();
  public static void main(java.lang.String[]);
  public static JGDS2.Struct lineWidth(int[], int[], double, boolean, boolean, boolean, double, int);
  public static JGDS2.Struct star(double, int, boolean, double);
}
Compiled from "CircleThree.java"
public class CNST.CircleThree$Circle {
  final CNST.CircleThree$Point center;
  final double radius;
  public CNST.CircleThree$Circle(CNST.CircleThree$Point, double);
  public double getRadius();
  public CNST.CircleThree$Point getCenter();
  public java.lang.String toString();
}
Compiled from "CircleThree.java"
public class CNST.CircleThree$Point {
  final double x;
  final double y;
  public CNST.CircleThree$Point(double, double);
  public java.lang.String toString();
}
Compiled from "CircleThree.java"
public class CNST.CircleThree {
  static final double TOL;
  public CNST.CircleThree();
  public static CNST.CircleThree$Circle circleFromPoints(CNST.CircleThree$Point, CNST.CircleThree$Point, CNST.CircleThree$Point);
}
Compiled from "Scripting.java"
public class CNST.Scripting {
  public CNST.Scripting();
  public static void main(java.lang.String[]);
  public static JGDS2.GArea createEllipse(double, double, double, double, int, double, int);
  public static JGDS2.GArea createEllipseVector(double, double, double, double, double, int, double);
  public static JGDS2.GArea createCircleThree(double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createCircleWave(double, double, double, int, double, int, double, int);
  public static JGDS2.GArea createCross(double, double, double, double, double, int);
  public static JGDS2.GArea createLshape(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createArc(double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createArcVector(double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createPolygon(double, double, double, int, double, int, double);
  public static JGDS2.GArea createRectangle(double, double, double, double, double, int);
  public static JGDS2.GArea createRectangleLH(double, double, double, double, double, int);
  public static JGDS2.GArea createRectangleC(double, double, double, double, double, int);
  public static JGDS2.GArea createRoundRect(double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createRoundRectC(double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createRectSUshape(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createRectTaper(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createStar(double, double, double, double, int, double, int, double);
  public static JGDS2.GArea createTorus(double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createTorusW(double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createTorusEllipseW(double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createTorusEllipseFocusW(double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createTorusVector(double, double, double, double, int, double);
  public static JGDS2.GArea createTorusWaveIn(double, double, double, double, int, double, int, double, int);
  public static JGDS2.GArea createTorusWaveOut(double, double, double, double, int, double, int, double, int);
  public static void createArrayRectV1(JGDS2.Struct, JGDS2.Struct, double, double, int, int, double, double);
  public static void createArrayRectV2(JGDS2.Struct, JGDS2.Struct, double, double, int, int, double, double);
  public static void createArrayHex(JGDS2.Struct, JGDS2.Struct, double, double, int, int, double);
  public static void createArrayPolarV1(JGDS2.Struct, JGDS2.Struct, double, double, double, double, double, double);
  public static void createArrayPolarV1R(JGDS2.Struct, JGDS2.Struct, double, double, double, double, double, double);
  public static void createArrayPolarV2(JGDS2.Struct, JGDS2.Struct, double, double, int, double, double, int);
  public static void createArrayPolarV2R(JGDS2.Struct, JGDS2.Struct, double, double, int, double, double, int);
  public static void createSqrPillar(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, double, int, int, double, int);
  public static void createHexPillar(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, int, int, double, int);
  public static void createSqrHole(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, double, int, int, double, int);
  public static void createHexHole(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, int, int, double, int);
  public static void createSqrPillarC(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, double, int, int, double, int);
  public static void createHexPillarC(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, int, int, double, int);
  public static void createSqrHoleC(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, double, int, int, double, int);
  public static void createHexHoleC(java.lang.String, JGDS2.Struct, double, double, double, double, int, double, int, int, double, int);
  public static void createSqrPillarV(java.lang.String, JGDS2.Struct, double, double, double, double, double, double, int, int, double, int, double);
  public static void createHexPillarV(java.lang.String, JGDS2.Struct, double, double, double, double, double, int, int, double, int, double);
  public static void createSqrHoleV(java.lang.String, JGDS2.Struct, double, double, double, double, double, double, int, int, double, int, double);
  public static void createHexHoleV(java.lang.String, JGDS2.Struct, double, double, double, double, double, int, int, double, int, double);
  public static void createSqrPillarVC(java.lang.String, JGDS2.Struct, double, double, double, double, double, double, int, int, double, int, double);
  public static void createHexPillarVC(java.lang.String, JGDS2.Struct, double, double, double, double, double, int, int, double, int, double);
  public static void createSqrHoleVC(java.lang.String, JGDS2.Struct, double, double, double, double, double, double, int, int, double, int, double);
  public static void createHexHoleVC(java.lang.String, JGDS2.Struct, double, double, double, double, double, int, int, double, int, double);
  public static JGDS2.GArea createTextGds(java.lang.String, java.lang.String, double, double, double, double, int, double);
  public static JGDS2.GArea createTextGdsC(java.lang.String, java.lang.String, double, double, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createTextOutline(java.lang.String, java.lang.String, double, double, double, double, double, int, double);
  public static void createTextOutline(JGDS2.Struct, java.lang.String, java.lang.String, double, double, double, double, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createTextOutlineC(java.lang.String, java.lang.String, double, double, double, double, double, int, double);
  public static void createTextOutlineC(JGDS2.Struct, java.lang.String, java.lang.String, double, double, double, double, int, double, double);
  public static void createLabelMakerAutoOut(int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, int, double);
  public static void createLabelMakerAutoRowCol(int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, int, double);
  public static void createLabelMakerAutoOutLett(int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, int, double);
  public static void createLabelMakerAutoRowColLett(int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, int, double);
  public static void createLabelMakerCustomOuter(java.lang.String[], int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, int, double);
  public static void createLabelMakerCustomRowColumn(java.lang.String[], int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, int, double);
  public static void createLabelOutlineAutoOut(int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, double, int, double);
  public static void createLabelOutlineAutoRowCol(int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, double, int, double);
  public static void createLabelOutlineAutoOutLett(int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, double, int, double);
  public static void createLabelOutlineAutoRowColLett(int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, double, int, double);
  public static void createLabelOutlineCustomOuter(java.lang.String[], int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, double, int, double);
  public static void createLabelOutlineCustomRowColumn(java.lang.String[], int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createPostScript(double, double, java.lang.String, int, double, double, double, int);
  public static void createPostScript(JGDS2.Struct, double, double, java.lang.String, int, double, double, double, int);
  public static JGDS2.GArea createCnstEmblemLogo(double, double, double, double, double, int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea createCnstLogo(double, double, double, double, double, int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea createNistLogo(double, double, double, double, double, int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea createNistCnstLogo(double, double, double, double, double, int) throws java.io.FileNotFoundException;
  public static void createArcSquareFill(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, double, double, int, double, int);
  public static void createArcSquareFillV(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createArcHexFill(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, double, double, int, double, int);
  public static void createArcHexFillV(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, double, double, double, double, int);
  public static JGDS2.GArea createBezierCurve(double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createBezierCurveInv(double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createBezierCurveInvSlot(double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static void createSierpinskiTriangle(JGDS2.Struct, java.lang.String, double, double, int, double, int);
  public static void createSierpinskiCarpet(JGDS2.Struct, java.lang.String, double, double, int, double, int);
  public static void createVicsekSaltire(JGDS2.Struct, java.lang.String, double, double, int, double, int);
  public static void createVicsekCross(JGDS2.Struct, java.lang.String, double, double, int, double, int);
  public static void createCurvedTree(JGDS2.Struct, java.lang.String, double, double, double, double, int, int);
  public static void createAnotherTree(JGDS2.Struct, java.lang.String, double, double, int, int);
  public static void createTree(JGDS2.Struct, java.lang.String, double, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createFunctionXY(java.lang.String, double, double, double, double, int, double, int, int, double, int) throws javax.script.ScriptException;
  public static void createFunctionXY(JGDS2.Struct, java.lang.String, double, double, double, double, int, double, int, int, double, int) throws javax.script.ScriptException;
  public static java.util.ArrayList<JGDS2.GArea> createFunctionRTheta(java.lang.String, double, double, double, double, int, double, int, int, double, int) throws javax.script.ScriptException;
  public static void createFunctionRTheta(JGDS2.Struct, java.lang.String, double, double, double, double, int, double, int, int, double, int) throws javax.script.ScriptException;
  public static java.util.ArrayList<JGDS2.GArea> createGrayERamp(double, double, double, double, int, double);
  public static void createGrayERamp(JGDS2.Struct, double, double, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createGrayENgon(double, double, double, double, int, int, double);
  public static void createGrayENgon(JGDS2.Struct, double, double, double, double, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createGrayUDR(double, double, java.util.ArrayList<java.lang.Double>, double);
  public static void createGrayUDR(JGDS2.Struct, double, double, java.util.ArrayList<java.lang.Double>, double);
  public static java.util.ArrayList<JGDS2.GArea> createGrayUDNgon(double, double, java.util.ArrayList<java.lang.Double>, int, double);
  public static void createGrayUDNgon(JGDS2.Struct, double, double, java.util.ArrayList<java.lang.Double>, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createGrayERamp(double, double, double, double, int, boolean, double);
  public static void createGrayERamp(JGDS2.Struct, double, double, double, double, int, boolean, double);
  public static java.util.ArrayList<JGDS2.GArea> createGrayERamp2(double, double, double, double, int, double);
  public static void createGrayERamp2(JGDS2.Struct, double, double, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createGrayUDRamp(double, double, java.util.ArrayList<java.lang.Double>, double, boolean, double);
  public static void createGrayUDRamp(JGDS2.Struct, double, double, java.util.ArrayList<java.lang.Double>, double, boolean, double);
  public static java.util.ArrayList<JGDS2.GArea> createGrayUDRamp2(double, double, java.util.ArrayList<java.lang.Double>, double, double);
  public static void createGrayUDRamp2(JGDS2.Struct, double, double, java.util.ArrayList<java.lang.Double>, double, double);
  public static void createGraySpiralStairOverlap(JGDS2.Struct, double, double, double, double, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralStair(double, double, double, double, int, int, double);
  public static void createGraySpiralStair(JGDS2.Struct, double, double, double, double, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createIntElec1(double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createIntElec1(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createIntElec2(double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createIntElec2(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createIntElec3(double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createIntElec3(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createIntElec4(double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createIntElec4(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createIntElec5(double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createIntElec5(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createTjunction(double, double, double, double, double, double, double, int, double, int);
  public static void createTjunction(JGDS2.Struct, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createHjunction(double, double, double, double, double, double, double, int, double, int);
  public static void createHjunction(JGDS2.Struct, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createArrowJunction(double, double, double, double, double, double, double, int, double, double, int);
  public static void createArrowJunction(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createMeanderSin(double, double, double, double, double, double, double, double, int, int, double, double, double, double, int);
  public static void createMeanderSin(JGDS2.Struct, double, double, double, double, double, double, double, double, int, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createMeanderSqr(double, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createMeanderSqr(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createMeanderRamp(double, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createMeanderRamp(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createMeanderTri(double, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static void createMeanderTri(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, double, double, double, int);
  public static JGDS2.GArea createPoints2Shape(double, double, java.util.ArrayList<java.lang.Double>, double, int);
  public static JGDS2.GArea createPolyPath(double, double, java.util.ArrayList<java.lang.Double>, double, int, int, double, int);
  public static void createRandomPolygons(JGDS2.Struct, java.lang.String, double, double, double, double, double, int, double, int, int, boolean, int);
  public static void createRandomEllipses(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, double, int, int, boolean, int);
  public static void createRandomEllipsesV(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, double, int, int, boolean, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createResoPattern(double, double, double, double, double, int);
  public static void createResoPattern(JGDS2.Struct, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createResoPatternPi(double, double, double, double, int, double, int);
  public static void createResoPatternPi(JGDS2.Struct, double, double, double, double, int, double, int);
  public static JGDS2.GArea createResoPatternRS(double, double, double, double, int, double, int, double);
  public static void createResoPatternRS(JGDS2.Struct, double, double, double, double, int, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createResoPatternRSA(double, double, double, double, double, double, int, double, double, int, double);
  public static void createResoPatternRSA(JGDS2.Struct, double, double, double, double, double, double, int, double, double, int, double);
  public static JGDS2.GArea createResoPatternLS(double, double, double, double, int, double, int, double);
  public static void createResoPatternLS(JGDS2.Struct, double, double, double, double, int, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createResoPatternLSA(double, double, double, double, double, double, int, double, double, int, double);
  public static void createResoPatternLSA(JGDS2.Struct, double, double, double, double, double, double, int, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralArch(double, double, double, int, double, double, double, int);
  public static void createSpiralArch(JGDS2.Struct, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralFermat(double, double, double, int, double, double, double, int);
  public static void createSpiralFermat(JGDS2.Struct, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralLog(double, double, double, int, double, double, double, double, int);
  public static void createSpiralLog(JGDS2.Struct, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralRect(double, double, double, double, double, int, double, int);
  public static void createSpiralRect(JGDS2.Struct, double, double, double, double, double, int, double, int);
  public static void createSpinIceA(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, int, int, int);
  public static void createSpinIceVectorA(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createAlignFFFB1(double, double, int, int, double);
  public static void createAlignFFFB1(JGDS2.Struct, double, double, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlignFFFB2(double, double, int, int, double);
  public static void createAlignFFFB2(JGDS2.Struct, double, double, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlign3Level(double, double, int, int, int, double);
  public static void createAlign3Level(JGDS2.Struct, double, double, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlignVern(double, double, int, int, double, boolean, boolean, double, double, double);
  public static void createAlignVern(JGDS2.Struct, double, double, int, int, double, boolean, boolean, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlignVernLb1(double, double, int, int, double, double);
  public static void createAlignVernLb1(JGDS2.Struct, double, double, int, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlignVernLb2(double, double, int, int, double, double);
  public static void createAlignVernLb2(JGDS2.Struct, double, double, int, int, double, double);
  public static JGDS2.GArea createCustomCrossC1(double, double, double, double, double, boolean, double, double, int, double, int);
  public static JGDS2.GArea createCustomCrossC2(double, double, double, double, double, double, boolean, double, double, int, double, int);
  public static JGDS2.GArea createCustomCrossC3(double, double, double, double, double, double, double, boolean, double, double, int, double, int);
  public static JGDS2.GArea createCustomCrossC4(double, double, double, double, double, double, double, double, boolean, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCnstASML(java.lang.String, java.lang.String, int) throws java.io.FileNotFoundException;
  public static void createCnstASML(JGDS2.Struct, java.lang.String, java.lang.String, boolean, int) throws java.io.FileNotFoundException;
  public static java.util.ArrayList<JGDS2.GArea> createCnstContact5(java.lang.String, int) throws java.io.FileNotFoundException;
  public static void createCnstContact5(JGDS2.Struct, java.lang.String, boolean, int) throws java.io.FileNotFoundException;
  public static java.util.ArrayList<JGDS2.GArea> createCnstContact7(java.lang.String, int) throws java.io.FileNotFoundException;
  public static void createCnstContact7(JGDS2.Struct, java.lang.String, boolean, int) throws java.io.FileNotFoundException;
  public static java.util.ArrayList<JGDS2.GArea> createCustomVerniers(double, double, int, int, double, double, double, double, double, boolean, boolean, double, double, double, double);
  public static void createCustomVerniers(JGDS2.Struct, double, double, int, int, double, double, double, double, double, boolean, boolean, double, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createVerniers(double, double, int, int, double, int, java.lang.String, java.lang.String, double, double, double, double, double, double);
  public static void createVerniers(JGDS2.Struct, double, double, int, int, double, int, java.lang.String, java.lang.String, double, double, double, double, double, double);
  public static JGDS2.GArea createArrowHead(double, double, double, double, double, double, int);
  public static JGDS2.GArea createArrow(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createArrowLinearArray(double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createWaveGuide(double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createWaveGuideSlot(double, double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createWaveGuideInv(double, double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createWaveGuideInvSlot(double, double, double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createWaveGuideExpander(double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createLinearTaper(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLinearTaperSlot(double, double, double, double, double, double, double, double, double, int);
  public static void createLinearTaperSlot(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLinearTaperInvSlot(double, double, double, double, double, double, double, double, double, double, int);
  public static void createLinearTaperInvSlot(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createExponentialTaper(double, double, double, double, double, int, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createExpTaperInv(double, double, double, double, double, int, double, double, int, double);
  public static void createExpTaperInv(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createExpTaperInvSlot(double, double, double, double, double, int, double, double, double, double, int, double);
  public static void createExpTaperInvSlot(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, int, double);
  public static JGDS2.GArea createCustomTaper(java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static JGDS2.GArea createDirectionalCoupler1(double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createDirectionalCoupler2(double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createDirectionalCoupler3(double, double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createDirectionalCoupler4(double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createSbendTaper(double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createSbendFunnel(double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createSbend(double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createSbendLH(double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createSbendInv(double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createSbendInvSlot(double, double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createYbend(double, double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createYbendLH(double, double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createYbendInv(double, double, double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createYBend90(double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createYBendInv90(double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createYBendInvSlot90(double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createYbendInvSlot(double, double, double, double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea create90degreeBend(double, double, double, double, double, double, int, double);
  public static JGDS2.GArea create90degreeBendLH(double, double, double, double, double, double, int, double);
  public static JGDS2.GArea create90degreeInv(double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea create90degreeInvSlot(double, double, double, double, double, double, double, double, int, double);
  public static JGDS2.GArea create180bend(double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea create180bendInv(double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea create180bendInvSlot(double, double, double, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createRaceTrack(double, double, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralDelayLineArch(double, double, double, int, double, double, double, double, int, int);
  public static void createSpiralDelayLineArch(JGDS2.Struct, double, double, double, int, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralDelayLineFermat(double, double, double, int, double, double, double, double, int, int);
  public static void createSpiralDelayLineFermat(JGDS2.Struct, double, double, double, int, double, double, double, double, int, int);
  public static void createSpiralDelayLineArchV2(JGDS2.Struct, double, double, double, int, double, int, int, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralDelayLineArchInv(double, double, double, double, int, double, double, double, double, int, int);
  public static void createSpiralDelayLineArchInv(JGDS2.Struct, double, double, double, double, int, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createSpiralDelayLineFermatInv(double, double, double, double, int, double, double, double, double, int, int);
  public static void createSpiralDelayLineFermatInv(JGDS2.Struct, double, double, double, double, int, double, double, double, double, int, int);
  public static void createSpiralDelayLineArchV2Inv(JGDS2.Struct, double, double, double, double, int, double, int, int, double, double, int, int);
  public static void createGrating(JGDS2.Struct, java.lang.String, double, double, double, double, double, int, int);
  public static void createGratingCoupler(JGDS2.Struct, double, double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createApodizedGrating(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createGratingCWG(double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, boolean, double, double);
  public static void createGratingCWG(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, boolean, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createGratingCWGinv(double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, boolean, double, double);
  public static void createGratingCWGinv(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, boolean, double, double);
  public static void createPhC(JGDS2.Struct, java.lang.String, double, double, double, double, int, int, int, double, int);
  public static void createPhCV(JGDS2.Struct, java.lang.String, double, double, double, double, int, int, int, double, int, double);
  public static void createHex(JGDS2.Struct, java.lang.String, double, double, double, double, int, int, int, int);
  public static void createHexV(JGDS2.Struct, java.lang.String, double, double, double, double, int, int, int, int, double);
  public static void createDiscInfinite(JGDS2.Struct, double, double, double, int, double, double, double, boolean, int);
  public static void createRingInfinite(JGDS2.Struct, double, double, double, double, int, double, double, double, boolean, int);
  public static void createDiscInfDS(JGDS2.Struct, double, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createRingInfDS(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createDiscInfiniteInv(JGDS2.Struct, double, double, double, int, double, double, double, double, boolean, int);
  public static void createRingInfiniteInv(JGDS2.Struct, double, double, double, double, int, double, double, double, double, boolean, int);
  public static void createDiscInfInvDS(JGDS2.Struct, double, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingInfInvDS(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscInfiniteInvPos(JGDS2.Struct, double, double, double, double, int, double, double, double, double, boolean, int);
  public static void createRingInfiniteInvPos(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, boolean, int);
  public static void createDiscInfInvPosDS(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingInfInvPosDS(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymmetric(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createRingSymmetric(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createDiscSymDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymmetricLC(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createRingSymmetricLC(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createDiscSymLCDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymLCDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymLCPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymLCPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymmetricA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createRingSymmetricA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createDiscSymADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createRingSymADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createDiscSymAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createRingSymAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymmetricLCA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createRingSymmetricLCA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createDiscSymLCADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createRingSymLCADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createDiscSymLCAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createRingSymLCAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymmetricInv(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingSymmetricInv(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymmetricInvLC(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingSymmetricInvLC(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvLCDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvLCDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvLCPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvLCPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymmetricInvA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingSymmetricInvA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscSymInvADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymInvAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymmetricInvLCA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingSymmetricInvLCA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscSymInvLCADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvLCADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymInvLCAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvLCAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymmetricInvPos(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingSymmetricInvPos(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvPosDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvPosDS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvPosPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvPosPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymmetricInversePosLC(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingSymmetricInversePosLC(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvPosLCDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvPosLCDS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymInvPosLCPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingSymInvPosLCPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscSymmetricInvPosA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingSymmetricInvPosA(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscSymInvPosADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvPosADS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymInvPosAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvPosAPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymmetricInvPosLCA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingSymmetricInvPosLCA(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscSymInvPosLCADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvPosLCADS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscSymInvPosLCAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingSymInvPosLCAPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulley(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createRingPulley(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createDiscPulDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulleyLC(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createRingPulleyLC(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int, double);
  public static void createDiscPulLCDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulLCDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulLCPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulLCPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulleyA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createRingPulleyA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createDiscPulADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createRingPulADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createDiscPulAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createRingPulAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulleyLCA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createRingPulleyLCA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, boolean, int);
  public static void createDiscPulLCADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createRingPulLCADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, boolean, int);
  public static void createDiscPulLCAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createRingPulLCAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulleyInverse(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingPulleyInverse(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulleyInvLC(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingPulleyInvLC(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvLCDS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvLCDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvLCPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvLCPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulleyInvA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingPulleyInvA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscPulInvADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulInvAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulleyInvLCA(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingPulleyInvLCA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscPulInvLCADS(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvLCADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulInvLCAPul(JGDS2.Struct, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvLCAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulleyInvPos(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingPulleyInvPos(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvPDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvPDS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvPPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvPPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulleyInvPosLC(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createRingPulleyInvPosLC(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvPLCDS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvPLCDS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulInvPLCPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createRingPulInvPLCPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, int, double);
  public static void createDiscPulleyInvPosA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingPulleyInvPosA(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscPulInvPADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvPADS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulInvPAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvPAPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulleyInvPosLCA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createRingPulleyInvPosLCA(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, boolean, int);
  public static void createDiscPulInvPLCADS(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvPLCADS(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, boolean, int);
  public static void createDiscPulInvPLCAPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static void createRingPulInvPLCAPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideInvPhC(java.util.ArrayList<java.lang.Double>, double, double, double, double, int);
  public static void createWaveGuideInvPhC(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideInvPhCvary(java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static void createWaveGuideInvPhCvary(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuidePhC(java.util.ArrayList<java.lang.Double>, double, double, double, double, double, double, int);
  public static void createWaveGuidePhC(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuidePhCvary(java.util.ArrayList<java.lang.Double>, double, double, double, double, double, int);
  public static void createWaveGuidePhCvary(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideInvRectPhC(java.util.ArrayList<java.lang.Double>, double, double, double, double, int);
  public static void createWaveGuideInvRectPhC(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideInvRectPhCvary(java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static void createWaveGuideInvRectPhCvary(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideRectPhC(java.util.ArrayList<java.lang.Double>, double, double, double, double, double, double, int);
  public static void createWaveGuideRectPhC(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideRectPhCvary(java.util.ArrayList<java.lang.Double>, double, double, double, double, double, int);
  public static void createWaveGuideRectPhCvary(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideInvRectFlushPhCvary(java.util.ArrayList<java.lang.Double>, double, double, double, double, int);
  public static void createWaveGuideInvRectFlushPhCvary(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWaveGuideRectFlushPhCvary(java.util.ArrayList<java.lang.Double>, double, double, double, double, double, double, int);
  public static void createWaveGuideRectFlushPhCvary(JGDS2.Struct, java.util.ArrayList<java.lang.Double>, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWgdcd1(double, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWgdcd2(double, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWgdcd3(double, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWgdcd4(double, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWgdcd5(double, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWgdcd6(double, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWgdcd7(double, double, double, double, int, double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgdcd8(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBentBeam(double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createBentBeam(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBentBeamArray(double, double, double, double, double, double, double, double, double, int, double, double, double, int, double, double, int, double, int);
  public static void createBentBeamArray(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, double, double, int, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBiMorph(double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createBiMorph(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCombDriveV1(double, double, double, double, double, double, int, double, double, int, double, int, double, int);
  public static void createCombDriveV1(JGDS2.Struct, double, double, double, double, double, double, int, double, double, int, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLinearDriveV1(double, double, double, double, double, double, double, int, double, double, double, double, int, double, int, double, int);
  public static void createLinearDriveV1(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, double, int, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring1A(double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createFoldedSpring1A(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2A(double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createFoldedSpring2A(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring1B(double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createFoldedSpring1B(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2B(double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createFoldedSpring2B(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2C(double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createFoldedSpring2C(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2D(double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createFoldedSpring2D(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2E(double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static void createFoldedSpring2E(JGDS2.Struct, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2F(double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static void createFoldedSpring2F(JGDS2.Struct, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2G(double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static void createFoldedSpring2G(JGDS2.Struct, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2H(double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static void createFoldedSpring2H(JGDS2.Struct, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2I(double, double, double, double, double, double, double, int, int, double, double, int, double, int);
  public static void createFoldedSpring2I(JGDS2.Struct, double, double, double, double, double, double, double, int, int, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2J(double, double, double, double, double, double, double, int, int, double, double, int, double, int);
  public static void createFoldedSpring2J(JGDS2.Struct, double, double, double, double, double, double, double, int, int, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBolometerL(double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, int, int, int, int, int, int, double, double);
  public static void createBolometerL(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, int, int, int, int, int, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createBolometerU(double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, int, int, int, int, int, int, double, double);
  public static void createBolometerU(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, int, int, int, int, int, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createGear(double, double, double, double, double, int, int, double, int);
  public static void createGear(JGDS2.Struct, double, double, double, double, double, int, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createGearT(double, double, double, double, double, int, double, int, double, int);
  public static void createGearT(JGDS2.Struct, double, double, double, double, double, int, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createStraightSpring(double, double, double, double, double, double, int, int, double, int, double, int);
  public static void createStraightSpring(JGDS2.Struct, double, double, double, double, double, double, int, int, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCircularSpring(double, double, double, double, double, double, int, int, double, int, double, int);
  public static void createCircularSpring(JGDS2.Struct, double, double, double, double, double, double, int, int, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createStraightSpringE(double, double, double, double, double, double, int, int, double, double, int, double, double, double, int, double, int);
  public static void createtraightSpringE(JGDS2.Struct, double, double, double, double, double, double, int, int, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCircularSpringE(double, double, double, double, double, double, int, int, double, double, int, double, double, double, int, double, int);
  public static void createCircularSpringE(JGDS2.Struct, double, double, double, double, double, double, int, int, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCombRadialV1(double, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static void createCombRadialV1(JGDS2.Struct, double, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCombRadialV2(double, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static void createCombRadialV2(JGDS2.Struct, double, double, double, double, double, double, double, double, int, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure2A(double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure2A(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure2B(double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure2B(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure2C(double, double, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createFlexure2C(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure2D(double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure2D(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure2E(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure2E(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure4A(double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure4A(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure4B(double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure4B(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure4C(double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure4C(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure4D(double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure4D(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexure4E(double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createFlexure4E(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverL(double, double, double, double, double, int, double, double, double, double, int);
  public static void createCantileverL(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverP(double, double, double, double, double, int, double, double, double, double, int);
  public static void createCantileverP(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSine(double, double, double, double, double, int, double, double, double, double, int);
  public static void createCantileverSine(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverLSE(double, double, double, double, double, double, int, double, double, double, int);
  public static void createCantileverLSE(JGDS2.Struct, double, double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverNLSE(double, double, double, double, double, double, int, double, double, double, int);
  public static void createCantileverNLSE(JGDS2.Struct, double, double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverCustom(double, double, java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static void createCantileverCustom(JGDS2.Struct, double, double, java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSR(double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverSR(JGDS2.Struct, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSTri(double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverSTri(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSTrap(double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverSTrap(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSPaddle(double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverSPaddle(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSCH(double, double, double, double, int, double, double, double, int, double, int);
  public static void createCantileverSCH(JGDS2.Struct, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSCF(double, double, double, double, int, double, double, double, double, int, double, int);
  public static void createCantileverSCF(JGDS2.Struct, double, double, double, double, int, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverHR(double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverHR(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverHTri(double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverHTri(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverHTrap(double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverHTrap(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverHPaddle(double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverHPaddle(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverHCH(double, double, double, double, int, double, double, double, double, int, double, int);
  public static void createCantileverHCH(JGDS2.Struct, double, double, double, double, int, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverHCF(double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static void createCantileverHCF(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverPB2(double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverPB2(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverPB3(double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverPB3(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverUR(double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverUR(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverUCF(double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createCantileverUCF(JGDS2.Struct, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverUC(double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createCantileverUC(JGDS2.Struct, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverUCC(double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverUCC(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverUCP(double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createCantileverUCP(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverCE(double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createCantileverCE(JGDS2.Struct, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCnntileverCEPaddle(double, double, double, double, double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static void createCnntileverCEPaddle(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createBeamCurvedEnds(double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createBeamCurvedEndsV(double, double, double, double, double, double, int, double);
  public static JGDS2.GArea createBeamCurvedEndsC(double, double, double, double, double, int, double, int);
  public static JGDS2.GArea createBeamCurvedEndsCV(double, double, double, double, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamL(double, double, double, double, double, int, double, double, double, double, int);
  public static void createDcBeamL(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamP(double, double, double, double, double, int, double, double, double, double, int);
  public static void createDcBeamP(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamLSE(double, double, double, double, double, double, int, double, double, double, int);
  public static void createDcBeamLSE(JGDS2.Struct, double, double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamNLSE(double, double, double, double, double, double, int, double, double, double, int);
  public static void createDcBeamNLSE(JGDS2.Struct, double, double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamCustom(double, double, java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static void createDcBeamCustom(JGDS2.Struct, double, double, java.util.ArrayList<java.lang.Double>, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamR(double, double, double, double, double, double, double, int, double, int);
  public static void createDcBeamR(JGDS2.Struct, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamT(double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createDcBeamT(JGDS2.Struct, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamT2(double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createDcBeamT2(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamCB(double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createDcBeamCB(JGDS2.Struct, double, double, double, double, double, int, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamC(double, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createDcBeamC(JGDS2.Struct, double, double, double, double, double, double, double, double, int, double, double, double, int, double, int);
  public static void createMARAs(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMARA(double, double, int, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMARA(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMATALWs(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMATALW(double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMATALW(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMATAs(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMATA(double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMATA(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAR2s(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMAR2(double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAR2(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAR3s(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMAR3(double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAR3(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMARCs(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMARC(double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMARC(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAT2s(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMAT2(double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAT2(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAT3s(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMAT3(double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMAT3(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMATCs(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMATC(double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMATC(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMARALINEARs(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createMARALINEAR(double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createMARALINEAR(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int);
  public static void createMARACURVEs(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createMARACURVE(double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double, double);
  public static void createMARACURVE(JGDS2.Struct, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createGuckelRing(double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static void createGuckelRing(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createGuckelRingArray(double, double, double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static void createGuckelRingArray(JGDS2.Struct, double, double, double, double, double, double, int, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDiamondRing(double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static void createDiamondRing(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFluidCell(double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, double, double, double, int, int, int, int, int, int, double, double);
  public static void createFluidCell(JGDS2.Struct, double, double, double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, double, double, double, int, int, int, int, int, int, double, double);
  public static double getFontOutline();
  public static int getFracElements();
  public static double getGDSreso();
  public static int getGdsLayer();
  public static int getLayer();
  public static int getDataType();
  public static double getPixelValue();
  public static double getShapeReso();
  public static void setFontOutline(double);
  public static void setFracElements(int);
  public static void setGDSreso(double);
  public static void setGdsLayer(int);
  public static void setLayer(int);
  public static void setDataType(int);
  public static void setPixelValue(double);
  public static void setShapeReso(double);
  public static double degreeToRadians(double);
  public static void createStructRotate(JGDS2.Struct, java.util.ArrayList<JGDS2.GArea>, double, double, double);
  public static void createStructTranslateRotate(JGDS2.Struct, java.util.ArrayList<JGDS2.GArea>, double, double, double);
  public static void createStruct(JGDS2.Struct, java.util.ArrayList<JGDS2.GArea>);
  public static void createStruct(JGDS2.Struct, java.util.ArrayList<JGDS2.GArea>, boolean);
  public static JGDS2.GArea transformGArea(JGDS2.GArea, double, double, double);
  public static JGDS2.GArea rotateGArea(JGDS2.GArea, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> transformArrayListGArea(java.util.ArrayList<JGDS2.GArea>, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> rotateArrayListGArea(java.util.ArrayList<JGDS2.GArea>, double, double, double);
}
Compiled from "AboutActions.java"
public class CNSTnanoToolbox.AboutActions {
  public CNSTnanoToolbox.AboutActions();
  public static void showAbout(javafx.stage.Stage);
  public static void hideAbout(javafx.stage.Stage, java.lang.String, java.lang.String);
}
Compiled from "AboutInterface.java"
public interface CNSTnanoToolbox.AboutInterface {
  public static final java.lang.String aboutCNSTScriptingTitle;
  public static final java.lang.String aboutCNSTScriptingText;
  public static final java.lang.String aboutPillarHoleTitle;
  public static final java.lang.String aboutPillarHoleText;
  public static final java.lang.String aboutTorusTitle;
  public static final java.lang.String aboutTorusText;
  public static final java.lang.String aboutBullsEyeTitle;
  public static final java.lang.String aboutBullsEyeText;
  public static final java.lang.String aboutSpiralsTitle;
  public static final java.lang.String aboutSpiralsText;
  public static final java.lang.String aboutGratingsTitle;
  public static final java.lang.String aboutGratingsText;
  public static final java.lang.String aboutCNSTReticleFrameTitle;
  public static final java.lang.String aboutCNSTReticleFrameText;
  public static final java.lang.String aboutGenericReticleFrameTitle;
  public static final java.lang.String aboutGenericReticleFrameText;
  public static final java.lang.String aboutJEOL6300JdfSdfTitle;
  public static final java.lang.String aboutJEOL6300JdfSdfText;
  public static final java.lang.String aboutJEOLMaxClockTitle;
  public static final java.lang.String aboutJEOLMaxClockText;
  public static final java.lang.String aboutJEOLALignmentOffsetTitle;
  public static final java.lang.String aboutJEOLALignmentOffsetText;
  public static final java.lang.String aboutEBLWriteTimeEstimationTitle;
  public static final java.lang.String aboutEBLWriteTimeEstimationText;
  public static final java.lang.String aboutLabelMakerTitle;
  public static final java.lang.String aboutLabelMakerText;
  public static final java.lang.String aboutText2GDSTitle;
  public static final java.lang.String aboutText2GDSText;
  public static final java.lang.String aboutFunctionGeneratorTitle;
  public static final java.lang.String aboutFunctionGeneratorText;
  public static final java.lang.String aboutBinaryZonePlatesTitle;
  public static final java.lang.String aboutBinaryZonePlatesText;
  public static final java.lang.String aboutPhotonicCrystalsTitle;
  public static final java.lang.String aboutPhotonicCrystalsText;
  public static final java.lang.String aboutRandomPolygonsTitle;
  public static final java.lang.String aboutRandomPolygonsText;
  public static final java.lang.String aboutRandomRectangularArrayTitle;
  public static final java.lang.String aboutRandomRectangularArrayText;
  public static final java.lang.String aboutCantleverArraysTitle;
  public static final java.lang.String aboutCantleverArraysText;
  public static final java.lang.String aboutVerniersTitle;
  public static final java.lang.String aboutVerniersText;
  public static final java.lang.String aboutFractalsTitle;
  public static final java.lang.String aboutFractalsText;
  public static final java.lang.String aboutGrayscaleImage2GDSTitle;
  public static final java.lang.String aboutGrayscaleImage2GDSText;
  public static final java.lang.String aboutWoollam2FilmetricsTitle;
  public static final java.lang.String aboutWoollam2FilmetricsText;
}
Compiled from "AboutScene.java"
public class CNSTnanoToolbox.AboutScene {
  public CNSTnanoToolbox.AboutScene();
  public javafx.scene.Scene aboutScene(java.lang.String);
}
Compiled from "CNSTmainPageLogo.java"
public class CNSTnanoToolbox.CNSTmainPageLogo {
  public CNSTnanoToolbox.CNSTmainPageLogo();
  public static javafx.scene.Group generateLogoSide();
}
Compiled from "CNSTmainPaneController.java"
public class CNSTnanoToolbox.CNSTmainPaneController implements javafx.fxml.Initializable {
  public CNSTnanoToolbox.CNSTmainPaneController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "CNSTnano.java"
public class CNSTnanoToolbox.CNSTnano extends javafx.application.Application {
  public CNSTnanoToolbox.CNSTnano();
  public void start(javafx.stage.Stage) throws java.lang.Exception;
  public static void main(java.lang.String[]) throws java.io.IOException, java.lang.Exception;
  static void defineScriptingOption(java.lang.String[]) throws java.io.FileNotFoundException, java.io.IOException, java.lang.Exception;
  public static void cnstScriptingOption(java.lang.String[]) throws java.io.FileNotFoundException, java.io.IOException, java.lang.Exception;
  public static void getFontNamesOption() throws java.io.IOException;
  public static java.lang.String commandLineError();
}
Compiled from "CNSTnanoController.java"
class CNSTnanoToolbox.CNSTnanoController$1 implements javafx.beans.value.ChangeListener<javafx.scene.control.TreeItem> {
  final CNSTnanoToolbox.CNSTnanoController this$0;
  CNSTnanoToolbox.CNSTnanoController$1(CNSTnanoToolbox.CNSTnanoController);
  public void changed(javafx.beans.value.ObservableValue<? extends javafx.scene.control.TreeItem>, javafx.scene.control.TreeItem, javafx.scene.control.TreeItem);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "CNSTnanoController.java"
public class CNSTnanoToolbox.CNSTnanoController implements javafx.fxml.Initializable {
  public CNSTnanoToolbox.CNSTnanoController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public void createCNSTlogo();
  static void access$000(CNSTnanoToolbox.CNSTnanoController, javafx.beans.value.ObservableValue, javafx.scene.control.TreeItem, javafx.scene.control.TreeItem) throws java.io.IOException;
}
Compiled from "JEOL6300plotJdfSdfActions.java"
public class CNSTnanoToolbox.JEOL6300plotJdfSdfActions {
  public CNSTnanoToolbox.JEOL6300plotJdfSdfActions();
  public static void plotJdfSdf(javafx.stage.Stage);
  public static void initPlotJdfSdf(javafx.stage.Stage, java.lang.String, javafx.scene.layout.AnchorPane);
}
Compiled from "JEOL6300plotJdfSdfScene.java"
public class CNSTnanoToolbox.JEOL6300plotJdfSdfScene {
  public CNSTnanoToolbox.JEOL6300plotJdfSdfScene();
  public javafx.scene.Scene plotJdfSdfScene(javafx.scene.layout.AnchorPane);
}
Compiled from "JEOL6300showJdfSdfActions.java"
public class CNSTnanoToolbox.JEOL6300showJdfSdfActions {
  public CNSTnanoToolbox.JEOL6300showJdfSdfActions();
  public static void showJdfSdf(javafx.stage.Stage);
  public static void initShowJdfSdf(javafx.stage.Stage, java.lang.String, java.lang.String);
}
Compiled from "JEOL6300showJdfSdfScene.java"
public class CNSTnanoToolbox.JEOL6300showJdfSdfScene {
  public CNSTnanoToolbox.JEOL6300showJdfSdfScene();
  public javafx.scene.Scene showJdfSdfScene(java.lang.String);
}
Compiled from "JavaFXtestAppsV4.java"
public class CNSTnanoToolbox.JavaFXtestAppsV4 extends javafx.application.Application {
  public CNSTnanoToolbox.JavaFXtestAppsV4();
  public void start(javafx.stage.Stage) throws java.lang.Exception;
  public static void main(java.lang.String[]);
}
Compiled from "BinaryZonePlatesController.java"
public class CNSTnanoToolbox.advancedCAD.BinaryZonePlatesController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.advancedCAD.BinaryZonePlatesController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "CantileverArraysController.java"
public class CNSTnanoToolbox.advancedCAD.CantileverArraysController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.advancedCAD.CantileverArraysController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public static double[] rampNonLinearSE(double[], double, double);
  static JGDS2.Struct createArray(double[], double, double, int);
}
Compiled from "FractalsController.java"
public class CNSTnanoToolbox.advancedCAD.FractalsController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.advancedCAD.FractalsController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "FunctionGeneratorController.java"
public class CNSTnanoToolbox.advancedCAD.FunctionGeneratorController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.advancedCAD.FunctionGeneratorController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  static void evaluateFunction();
  static double fX(double, double);
  static double fY(double, double);
}
Compiled from "GrayscaleImage2GDSController.java"
public class CNSTnanoToolbox.advancedCAD.GrayscaleImage2GDSController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  static java.io.File file;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  int displayColor2;
  public CNSTnanoToolbox.advancedCAD.GrayscaleImage2GDSController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public void drawLineDataMerge(JGDS2.Struct, int, double, int[]);
  public void drawRect(JGDS2.Struct, int, int, int, double, int);
  public static java.lang.String errorCheckImg2Gds(java.io.File, double);
  static {};
}
Compiled from "LabelMakerController.java"
public class CNSTnanoToolbox.advancedCAD.LabelMakerController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  int displayColor;
  int displayColor2;
  static java.io.File file;
  static java.lang.String[] horzArr;
  static java.lang.String[] vertArr;
  static java.lang.String[][] rowColArr;
  java.lang.String openDir;
  java.lang.String saveToDir;
  public CNSTnanoToolbox.advancedCAD.LabelMakerController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  static void outer(JGDS2.Lib, int, int, double, double, JGDS2.Struct[], int[]);
  static void rowCol(int, int, double, double, JGDS2.Struct, JGDS2.Struct[], int[]);
  static void outerCustom(JGDS2.Lib, int, int, double, double, JGDS2.Struct[], int[]);
  static void horizStructures(JGDS2.Lib, double, JGDS2.Struct[], int[]);
  static void vertStructures(JGDS2.Lib, double, JGDS2.Struct[], int[]);
  static int[] hvAdvance(char[]);
  static void readHorizVert(int, int);
  static void getHorizVertData();
  static void setHorizVertData(java.lang.String[], java.lang.String[]);
  static void setHorizData(java.lang.String[], int);
  static void setVertData(java.lang.String[], int);
  static void rowColCustom(int, int, double, double, JGDS2.Struct, JGDS2.Struct[], int[]);
  static void rowColStructures(double, double, JGDS2.Struct, JGDS2.Struct[], int[]);
  static void readRowCol(int, int);
  static void getRowColData();
  static void setRowColData(java.lang.String[]);
  static void setRowColArr(java.lang.String[], int, int);
  static java.lang.String[] fillArray(java.lang.String[]);
  static int[] fillArray(int[]);
  static java.lang.String[][] fillArray(java.lang.String[][]);
  static int[][] fillArray(int[][]);
  static JGDS2.Struct[] numberArray(java.lang.String, double, double, int);
  public int[] numberAdvance(java.lang.String, double);
  static JGDS2.Struct[] asciiArray(java.lang.String, double, double, int);
  public int[] asciiAdvance(java.lang.String, double);
  static {};
}
Compiled from "PhotonicCrystalsController.java"
class CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$1 implements javafx.collections.ListChangeListener {
  public boolean suspended;
  final javafx.scene.control.TableColumn val$c1;
  final javafx.scene.control.TableColumn val$c2;
  final javafx.scene.control.TableColumn val$c3;
  final javafx.scene.control.TableColumn val$c4;
  final javafx.scene.control.TableColumn val$c5;
  final javafx.scene.control.TableColumn val$c6;
  final javafx.scene.control.TableColumn val$c7;
  final CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController this$0;
  CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$1(CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn);
  public void onChanged(javafx.collections.ListChangeListener$Change);
}
Compiled from "PhotonicCrystalsController.java"
class CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell$1 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell$1(CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "PhotonicCrystalsController.java"
class CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell$2 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell$2(CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "PhotonicCrystalsController.java"
public class CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell extends javafx.scene.control.TableCell<CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData, java.lang.String> {
  public CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory$TextFieldCell();
  protected void updateItem(java.lang.String, boolean);
  protected void updateItem(java.lang.Object, boolean);
}
Compiled from "PhotonicCrystalsController.java"
public class CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory implements javafx.util.Callback<javafx.scene.control.TableColumn<CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData, java.lang.String>, javafx.scene.control.TableCell<CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData, java.lang.String>> {
  public CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController$TextFieldCellFactory();
  public javafx.scene.control.TableCell<CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData, java.lang.String> call(javafx.scene.control.TableColumn<CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData, java.lang.String>);
  public java.lang.Object call(java.lang.Object);
}
Compiled from "PhotonicCrystalsController.java"
public class CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController implements CNSTnanoToolbox.AboutInterface {
  static java.io.File file;
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  final javafx.collections.ObservableList<CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData> ol;
  public CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController();
  public void createGratings(JGDS2.Lib);
  public double arrayExtent(double, double, int, double);
  public java.lang.String rowNumberPrefix(int);
  public boolean checkNullValues(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  static javafx.scene.control.TableView access$000(CNSTnanoToolbox.advancedCAD.PhotonicCrystalsController);
  static {};
}
Compiled from "PhotonicCrystalsData.java"
public class CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData {
  public CNSTnanoToolbox.advancedCAD.PhotonicCrystalsData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getDiameter();
  public void setDiameter(java.lang.String);
  public javafx.beans.property.SimpleStringProperty diameterProperty();
  public java.lang.String getSides();
  public void setSides(java.lang.String);
  public javafx.beans.property.SimpleStringProperty sidesProperty();
  public java.lang.String getSpacing();
  public void setSpacing(java.lang.String);
  public javafx.beans.property.SimpleStringProperty spacingProperty();
  public java.lang.String getSizeX();
  public void setSizeX(java.lang.String);
  public javafx.beans.property.SimpleStringProperty sizeXProperty();
  public java.lang.String getSizeY();
  public void setSizeY(java.lang.String);
  public javafx.beans.property.SimpleStringProperty sizeYProperty();
  public java.lang.String getSeparation();
  public void setSeparation(java.lang.String);
  public javafx.beans.property.SimpleStringProperty separationProperty();
  public java.lang.String getLayer();
  public void setLayer(java.lang.String);
  public javafx.beans.property.SimpleStringProperty layerProperty();
}
Compiled from "RandomPolygonsController.java"
public class CNSTnanoToolbox.advancedCAD.RandomPolygonsController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  int displayColor2;
  public CNSTnanoToolbox.advancedCAD.RandomPolygonsController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public static java.util.TreeMap<java.lang.Double, java.lang.Double> generateCoordinates(double, double, double, double, int, int);
  static boolean testSeparation(double, double, double, java.util.Map<java.lang.Double, java.lang.Double>);
}
Compiled from "RandomRectArrayController.java"
public class CNSTnanoToolbox.advancedCAD.RandomRectArrayController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  int displayColor2;
  int displayColor3;
  static java.io.File file;
  public CNSTnanoToolbox.advancedCAD.RandomRectArrayController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public java.util.ArrayList<java.util.ArrayList> getDataFromFile();
  static {};
}
Compiled from "Text2GDSController.java"
public class CNSTnanoToolbox.advancedCAD.Text2GDSController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.advancedCAD.Text2GDSController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "VerniersController.java"
class CNSTnanoToolbox.advancedCAD.VerniersController$1 implements javafx.collections.ListChangeListener {
  public boolean suspended;
  final javafx.scene.control.TableColumn val$c1;
  final javafx.scene.control.TableColumn val$c2;
  final javafx.scene.control.TableColumn val$c3;
  final javafx.scene.control.TableColumn val$c4;
  final javafx.scene.control.TableColumn val$c5;
  final javafx.scene.control.TableColumn val$c6;
  final javafx.scene.control.TableColumn val$c7;
  final javafx.scene.control.TableColumn val$c8;
  final javafx.scene.control.TableColumn val$c9;
  final CNSTnanoToolbox.advancedCAD.VerniersController this$0;
  CNSTnanoToolbox.advancedCAD.VerniersController$1(CNSTnanoToolbox.advancedCAD.VerniersController, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn);
  public void onChanged(javafx.collections.ListChangeListener$Change);
}
Compiled from "VerniersController.java"
class CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell$1 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell$1(CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "VerniersController.java"
class CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell$2 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell$2(CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "VerniersController.java"
public class CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell extends javafx.scene.control.TableCell<CNSTnanoToolbox.advancedCAD.VerniersData, java.lang.String> {
  public CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory$TextFieldCell();
  protected void updateItem(java.lang.String, boolean);
  protected void updateItem(java.lang.Object, boolean);
}
Compiled from "VerniersController.java"
public class CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory implements javafx.util.Callback<javafx.scene.control.TableColumn<CNSTnanoToolbox.advancedCAD.VerniersData, java.lang.String>, javafx.scene.control.TableCell<CNSTnanoToolbox.advancedCAD.VerniersData, java.lang.String>> {
  public CNSTnanoToolbox.advancedCAD.VerniersController$TextFieldCellFactory();
  public javafx.scene.control.TableCell<CNSTnanoToolbox.advancedCAD.VerniersData, java.lang.String> call(javafx.scene.control.TableColumn<CNSTnanoToolbox.advancedCAD.VerniersData, java.lang.String>);
  public java.lang.Object call(java.lang.Object);
}
Compiled from "VerniersController.java"
public class CNSTnanoToolbox.advancedCAD.VerniersController implements CNSTnanoToolbox.AboutInterface {
  static java.io.File file;
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  final javafx.collections.ObservableList<CNSTnanoToolbox.advancedCAD.VerniersData> ol;
  public CNSTnanoToolbox.advancedCAD.VerniersController();
  public void createGratings(JGDS2.Lib);
  public java.lang.String rowNumberPrefix(int);
  public boolean checkNullValues(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  static javafx.scene.control.TableView access$000(CNSTnanoToolbox.advancedCAD.VerniersController);
  static {};
}
Compiled from "VerniersData.java"
public class CNSTnanoToolbox.advancedCAD.VerniersData {
  public CNSTnanoToolbox.advancedCAD.VerniersData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getLayerA();
  public void setLayerA(java.lang.String);
  public javafx.beans.property.SimpleStringProperty layerAProperty();
  public java.lang.String getLayerB();
  public void setLayerB(java.lang.String);
  public javafx.beans.property.SimpleStringProperty layerBProperty();
  public java.lang.String getResolution();
  public void setResolution(java.lang.String);
  public javafx.beans.property.SimpleStringProperty resolutionProperty();
  public java.lang.String getTicks();
  public void setTicks(java.lang.String);
  public javafx.beans.property.SimpleStringProperty ticksProperty();
  public java.lang.String getLabelA();
  public void setLabelA(java.lang.String);
  public javafx.beans.property.SimpleStringProperty labelAProperty();
  public java.lang.String getLabelB();
  public void setLabelB(java.lang.String);
  public javafx.beans.property.SimpleStringProperty labelBProperty();
  public java.lang.String getWidth();
  public void setWidth(java.lang.String);
  public javafx.beans.property.SimpleStringProperty widthProperty();
  public java.lang.String getLength();
  public void setLength(java.lang.String);
  public javafx.beans.property.SimpleStringProperty lengthProperty();
  public java.lang.String getPitch();
  public void setPitch(java.lang.String);
  public javafx.beans.property.SimpleStringProperty pitchProperty();
}
Compiled from "BullsEyeController.java"
public class CNSTnanoToolbox.basicShapes.BullsEyeController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.basicShapes.BullsEyeController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "GratingsController.java"
class CNSTnanoToolbox.basicShapes.GratingsController$1 implements javafx.collections.ListChangeListener {
  public boolean suspended;
  final javafx.scene.control.TableColumn val$c1;
  final javafx.scene.control.TableColumn val$c2;
  final javafx.scene.control.TableColumn val$c3;
  final javafx.scene.control.TableColumn val$c4;
  final CNSTnanoToolbox.basicShapes.GratingsController this$0;
  CNSTnanoToolbox.basicShapes.GratingsController$1(CNSTnanoToolbox.basicShapes.GratingsController, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn);
  public void onChanged(javafx.collections.ListChangeListener$Change);
}
Compiled from "GratingsController.java"
class CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell$1 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell$1(CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "GratingsController.java"
class CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell$2 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell$2(CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "GratingsController.java"
public class CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell extends javafx.scene.control.TableCell<CNSTnanoToolbox.basicShapes.GratingsData, java.lang.String> {
  public CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory$TextFieldCell();
  protected void updateItem(java.lang.String, boolean);
  protected void updateItem(java.lang.Object, boolean);
}
Compiled from "GratingsController.java"
public class CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory implements javafx.util.Callback<javafx.scene.control.TableColumn<CNSTnanoToolbox.basicShapes.GratingsData, java.lang.String>, javafx.scene.control.TableCell<CNSTnanoToolbox.basicShapes.GratingsData, java.lang.String>> {
  public CNSTnanoToolbox.basicShapes.GratingsController$TextFieldCellFactory();
  public javafx.scene.control.TableCell<CNSTnanoToolbox.basicShapes.GratingsData, java.lang.String> call(javafx.scene.control.TableColumn<CNSTnanoToolbox.basicShapes.GratingsData, java.lang.String>);
  public java.lang.Object call(java.lang.Object);
}
Compiled from "GratingsController.java"
public class CNSTnanoToolbox.basicShapes.GratingsController implements CNSTnanoToolbox.AboutInterface {
  static java.io.File file;
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  final javafx.collections.ObservableList<CNSTnanoToolbox.basicShapes.GratingsData> ol;
  public CNSTnanoToolbox.basicShapes.GratingsController();
  public void createGratings(JGDS2.Struct, double, int);
  public double arrayExtent(double, double, int, double);
  public java.lang.String rowNumberPrefix(int);
  public boolean checkNullValues(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void printTable();
  static javafx.scene.control.TableView access$000(CNSTnanoToolbox.basicShapes.GratingsController);
  static {};
}
Compiled from "GratingsData.java"
public class CNSTnanoToolbox.basicShapes.GratingsData {
  public CNSTnanoToolbox.basicShapes.GratingsData(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getLineWidth();
  public java.lang.String getLineLength();
  public javafx.beans.property.SimpleStringProperty getGratingObject();
  public void setGratingObject(javafx.beans.property.SimpleStringProperty);
  public javafx.beans.property.ObjectProperty<javafx.beans.property.SimpleStringProperty> gratingObjectProperty();
  public void setLineWidth(java.lang.String);
  public javafx.beans.property.SimpleStringProperty lineWidthProperty();
  public void setLineLength(java.lang.String);
  public javafx.beans.property.SimpleStringProperty lineLengthProperty();
  public java.lang.String getPitch();
  public void setPitch(java.lang.String);
  public javafx.beans.property.SimpleStringProperty pitchProperty();
  public java.lang.String getNumberOfLines();
  public void setNumberOfLines(java.lang.String);
  public javafx.beans.property.SimpleStringProperty numberOfLinesProperty();
}
Compiled from "PillarHoleController.java"
public class CNSTnanoToolbox.basicShapes.PillarHoleController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.basicShapes.PillarHoleController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public static java.lang.String[] splitRotation(double);
  public static JGDS2.GArea inverseShape(JGDS2.GArea, double, double, int);
}
Compiled from "SpiralsController.java"
public class CNSTnanoToolbox.basicShapes.SpiralsController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.basicShapes.SpiralsController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "TorusController.java"
public class CNSTnanoToolbox.basicShapes.TorusController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  public CNSTnanoToolbox.basicShapes.TorusController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "CNSTReticleFrameController.java"
public class CNSTnanoToolbox.machineResources.CNSTReticleFrameController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  final int ASMLPAS5500NIST;
  final int CONTACT5INCH;
  final int CONTACT7INCH;
  public CNSTnanoToolbox.machineResources.CNSTReticleFrameController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public JGDS2.Struct frame(int, java.lang.String, java.lang.String, java.lang.String) throws java.io.FileNotFoundException;
  public java.lang.String getDate();
}
Compiled from "CNSTReticleLogo.java"
public class CNSTnanoToolbox.machineResources.CNSTReticleLogo implements CNSTnanoToolbox.machineResources.CNSTReticleLogoEPS {
  public CNSTnanoToolbox.machineResources.CNSTReticleLogo();
  static JGDS2.Struct createLogo() throws java.io.FileNotFoundException;
  public static JGDS2.GArea createEllipse(double, double, double, double, int, int);
  public static JGDS2.GArea createQuarterCircle(double, double, double, double, int, int);
  public static JGDS2.GArea createInvQuarterCircle(double, double, double, double, double, int, int);
  public static JGDS2.GArea createNISTlogo(int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea createCNSTlogo(int) throws java.io.FileNotFoundException;
  public static java.util.ArrayList<java.awt.geom.Path2D$Double> readData(java.util.Scanner, double);
  public static java.util.ArrayList<java.awt.geom.Path2D$Double> readData(java.lang.String[], double);
  public static java.awt.geom.Path2D$Double parseData(java.util.ArrayList<java.lang.Double>, java.lang.String, java.awt.geom.Path2D$Double, double);
  public static java.awt.geom.Path2D$Double mergePoints(java.util.ArrayList<java.lang.Double>, java.awt.geom.Path2D$Double, double);
  public static double rescalePoints(double, double);
}
Compiled from "CNSTReticleLogoEPS.java"
public interface CNSTnanoToolbox.machineResources.CNSTReticleLogoEPS {
  public static final java.lang.String cnst;
  public static final java.lang.String nist;
}
Compiled from "EBLWriteTimeEstimationController.java"
public class CNSTnanoToolbox.machineResources.EBLWriteTimeEstimationController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  public CNSTnanoToolbox.machineResources.EBLWriteTimeEstimationController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "GenericReticleFrameController.java"
public class CNSTnanoToolbox.machineResources.GenericReticleFrameController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  int displayColor;
  final int ASMLPAS5500300CDUV;
  final int CONTACT5INCH;
  final int CONTACT7INCH;
  final int ASMLPAS5000ANL;
  public CNSTnanoToolbox.machineResources.GenericReticleFrameController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public JGDS2.Struct frame(int, java.lang.String, java.lang.String, java.lang.String) throws java.io.FileNotFoundException;
  public java.lang.String getDate();
}
Compiled from "JEOL6300DoseTableData.java"
public class CNSTnanoToolbox.machineResources.JEOL6300DoseTableData {
  public CNSTnanoToolbox.machineResources.JEOL6300DoseTableData(java.lang.String, java.lang.String);
  public java.lang.String getShotRank();
  public java.lang.String getModulation();
  public javafx.beans.property.SimpleStringProperty getDoseTableObject();
  public void setDoseTableObject(javafx.beans.property.SimpleStringProperty);
  public javafx.beans.property.ObjectProperty<javafx.beans.property.SimpleStringProperty> doseTableObjectProperty();
  public void setShotRank(java.lang.String);
  public javafx.beans.property.SimpleStringProperty shotRankProperty();
  public void setModulation(java.lang.String);
  public javafx.beans.property.SimpleStringProperty modulationProperty();
}
Compiled from "JEOL6300JdfSdfController.java"
class CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$1 implements javafx.collections.ListChangeListener {
  public boolean suspended;
  final javafx.scene.control.TableColumn val$c1;
  final javafx.scene.control.TableColumn val$c2;
  final CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController this$0;
  CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$1(CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController, javafx.scene.control.TableColumn, javafx.scene.control.TableColumn);
  public void onChanged(javafx.collections.ListChangeListener$Change);
}
Compiled from "JEOL6300JdfSdfController.java"
class CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell$1 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell$1(CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "JEOL6300JdfSdfController.java"
class CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell$2 implements javafx.beans.value.ChangeListener<java.lang.Boolean> {
  final CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell this$0;
  CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell$2(CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell);
  public void changed(javafx.beans.value.ObservableValue<? extends java.lang.Boolean>, java.lang.Boolean, java.lang.Boolean);
  public void changed(javafx.beans.value.ObservableValue, java.lang.Object, java.lang.Object);
}
Compiled from "JEOL6300JdfSdfController.java"
public class CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell extends javafx.scene.control.TableCell<CNSTnanoToolbox.machineResources.JEOL6300DoseTableData, java.lang.String> {
  public CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory$TextFieldCell();
  protected void updateItem(java.lang.String, boolean);
  protected void updateItem(java.lang.Object, boolean);
}
Compiled from "JEOL6300JdfSdfController.java"
public class CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory implements javafx.util.Callback<javafx.scene.control.TableColumn<CNSTnanoToolbox.machineResources.JEOL6300DoseTableData, java.lang.String>, javafx.scene.control.TableCell<CNSTnanoToolbox.machineResources.JEOL6300DoseTableData, java.lang.String>> {
  public CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController$TextFieldCellFactory();
  public javafx.scene.control.TableCell<CNSTnanoToolbox.machineResources.JEOL6300DoseTableData, java.lang.String> call(javafx.scene.control.TableColumn<CNSTnanoToolbox.machineResources.JEOL6300DoseTableData, java.lang.String>);
  public java.lang.Object call(java.lang.Object);
}
Compiled from "JEOL6300JdfSdfController.java"
public class CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  static java.io.File file;
  javafx.stage.Stage about;
  javafx.stage.Stage showJdfSdf;
  javafx.stage.Stage plotJdfSdf;
  java.lang.String openDir;
  java.lang.String saveToDir;
  java.util.ArrayList<java.util.ArrayList> generateArr;
  int displayColor;
  int displayColor2;
  int displayColor3;
  int generateArrayIndex;
  java.lang.String GENERATEARRAY_VALUE;
  boolean GENERATE;
  boolean SHOW;
  final int GENERATEJDF;
  final int GENERATESDF;
  final int SHOWJDFSDF;
  final javafx.collections.ObservableList<CNSTnanoToolbox.machineResources.JEOL6300DoseTableData> ol;
  public CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public void setTwoValsDoseRamp();
  public void setFourValsDoseRamp();
  public java.lang.String[] updateGeneratedArraysList(java.util.ArrayList<java.util.ArrayList>);
  void printArrList(java.util.ArrayList<java.util.ArrayList>);
  public java.lang.String constructJdfSdfFile(boolean, int, java.lang.String);
  public java.lang.String doseTable();
  public java.lang.String doseTableShotRanks(java.util.ArrayList<java.lang.Integer>, java.util.ArrayList<double[]>);
  public boolean checkNullValues(java.lang.String, java.lang.String);
  public java.lang.String sdfFile(java.lang.String);
  public java.lang.String[] checkGlobalMarks();
  public java.lang.String checkChipMarks();
  public double[] checkRamp();
  public double[] rampLinear(double, double);
  public double[] rampPercentage(double, double);
  public double[] rampLinearSE(double, double, double);
  public double[] rampNonLinearSE(double, double);
  public void saveJDFSDF(java.lang.String, java.lang.String);
  public javafx.scene.layout.AnchorPane plotPattern();
  public static javafx.scene.paint.Color getArrayColor(int);
  public double[] axisLabels(double);
  static javafx.scene.control.TableView access$000(CNSTnanoToolbox.machineResources.JEOL6300JdfSdfController);
  static {};
}
Compiled from "JEOLAlignmentOffsetController.java"
public class CNSTnanoToolbox.machineResources.JEOLAlignmentOffsetController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  public CNSTnanoToolbox.machineResources.JEOLAlignmentOffsetController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
}
Compiled from "JEOLMaxClockController.java"
public class CNSTnanoToolbox.machineResources.JEOLMaxClockController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  public CNSTnanoToolbox.machineResources.JEOLMaxClockController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public double jeolTool();
}
Compiled from "Woollam2FilmetricsController.java"
public class CNSTnanoToolbox.metrology.Woollam2FilmetricsController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  static java.io.File file;
  javafx.stage.Stage about;
  java.lang.String openDir;
  java.lang.String saveToDir;
  java.lang.String nF40;
  java.lang.String kF40;
  java.lang.String nkF50;
  java.util.ArrayList<java.lang.Double> waveLength;
  java.util.ArrayList<java.lang.Double> n;
  java.util.ArrayList<java.lang.Double> k;
  int displayColor;
  int displayColor2;
  java.lang.String[] F50header;
  java.lang.String[] F40header;
  public CNSTnanoToolbox.metrology.Woollam2FilmetricsController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  static {};
}
Compiled from "ShapeProcessor.java"
public class CNSTnanoToolbox.processShapes.ShapeProcessor {
  public CNSTnanoToolbox.processShapes.ShapeProcessor();
  public static JGDS2.Struct createStruct(java.util.ArrayList<JGDS2.GArea>, java.lang.String);
}
Compiled from "CNSTscriptingArrays.java"
public class CNSTnanoToolbox.scripting.CNSTscriptingArrays {
  public CNSTnanoToolbox.scripting.CNSTscriptingArrays();
  public static void createInstance(java.lang.String[], JGDS2.Struct, JGDS2.Struct);
  public static void createInstanceSymmetric(java.lang.String[], JGDS2.Struct, JGDS2.Struct);
  public static JGDS2.GArea createText(java.lang.String, java.lang.String, java.lang.String[], int, boolean);
  public static void rectangularArray(java.lang.String[], JGDS2.Struct, JGDS2.Struct);
  public static void hexagonalArray(java.lang.String[], JGDS2.Struct, JGDS2.Struct);
  public static void polarArray(java.lang.String[], JGDS2.Struct, JGDS2.Struct);
  public static void generatePolarArrayV1(java.lang.String[], JGDS2.Struct, JGDS2.Struct, boolean);
  public static void generatePolarArrayV2(java.lang.String[], JGDS2.Struct, JGDS2.Struct, boolean);
  public static double polarAngleRotation(double);
  public static double degreeToRadians(double);
  public static void fontExists(java.lang.String);
  public static void createVerniers(java.lang.String[], JGDS2.Struct);
}
Compiled from "CNSTscriptingController.java"
class CNSTnanoToolbox.scripting.CNSTscriptingController$1 extends javafx.concurrent.Task<java.lang.Void> {
  final java.util.Scanner val$input;
  final java.lang.String[] val$tmp;
  final CNSTnanoToolbox.scripting.CNSTscriptingController this$0;
  CNSTnanoToolbox.scripting.CNSTscriptingController$1(CNSTnanoToolbox.scripting.CNSTscriptingController, java.util.Scanner, java.lang.String[]);
  public java.lang.Void call() throws java.lang.InterruptedException, java.io.FileNotFoundException, java.io.IOException, javax.script.ScriptException;
  public java.lang.Object call() throws java.lang.Exception;
}
Compiled from "CNSTscriptingController.java"
public class CNSTnanoToolbox.scripting.CNSTscriptingController implements javafx.fxml.Initializable,CNSTnanoToolbox.AboutInterface {
  javafx.stage.Stage about;
  static java.io.File file;
  static java.lang.String openDir;
  static java.lang.String saveToDir;
  static int displayColor;
  static int displayColor2;
  static java.util.ArrayList<JGDS2.Struct> structList;
  static java.util.ArrayList<java.lang.String> structName;
  public static java.util.ArrayList<java.lang.String> logFileINFO;
  static java.util.Map<java.lang.String, JGDS2.GArea> genAreaMap;
  static int gdsLayer;
  static int dataType;
  static int psFracElements;
  static double psPixelValue;
  static double gdsReso;
  static double shapeReso;
  static double fontOutline;
  static java.lang.String gdsFile;
  static java.lang.String currentStructName;
  static JGDS2.Struct top;
  static java.lang.String pts2instStructName;
  static boolean pts2inst;
  static boolean logFileTimeDate;
  static java.lang.String[] fontNames;
  public CNSTnanoToolbox.scripting.CNSTscriptingController();
  public void initialize(java.net.URL, java.util.ResourceBundle);
  public static void readData(java.util.Scanner) throws java.io.FileNotFoundException, javax.script.ScriptException;
  public static java.awt.geom.Path2D$Double parseData(java.util.ArrayList<java.lang.Double>, java.lang.String, java.awt.geom.Path2D$Double);
  public static void parseStructElementsTAB(java.lang.String);
  public static void parseStructElements(java.lang.String) throws javax.script.ScriptException, java.io.FileNotFoundException;
  public static boolean lineError(java.lang.String[], int, java.lang.String);
  public static boolean parameterError(int, int, java.lang.String);
  public static void selfReferencingError(java.lang.String);
  public static void structureDoesNotExist(java.lang.String, java.lang.String, java.lang.String);
  public static void layerDoesNotExist(java.lang.String, java.lang.String, java.lang.String);
  public static void setGdsLayer(java.util.ArrayList<java.lang.Double>);
  public static void setGdsLayer(int);
  public static int getGdsLayer();
  public static void setDataType(java.util.ArrayList<java.lang.Double>);
  public static void setDataType(int);
  public static int getDataType();
  public static void setStructName(java.lang.String);
  public static void setGDSReso(java.util.ArrayList<java.lang.Double>);
  public static void setGDSReso(double);
  public static void setFontOutline(java.util.ArrayList<java.lang.Double>);
  public static void setFontOutline(double);
  public static double getFontOutline();
  public static void setShapeReso(java.util.ArrayList<java.lang.Double>);
  public static void setShapeReso(double);
  public static double getShapeReso();
  public static double getGDSreso();
  public static void setPixelValue(java.util.ArrayList<java.lang.Double>);
  public static void setPixelValue(double);
  public static double getPixelValue();
  public static void setFracElements(java.util.ArrayList<java.lang.Double>);
  public static void setFracElements(int);
  public static int getFracElements();
  public static void setGDSfileName(java.lang.String);
  public static java.lang.String[] getFontNames();
  public static void addToErrorLog(java.lang.String);
  public static void doBOOLEANS(JGDS2.GArea, JGDS2.GArea, int, java.lang.String);
  public static void copyGenAreaCenter(JGDS2.GArea, double, double, java.lang.String, double, double, double, int, boolean);
  public static JGDS2.Struct getCurrentStruct();
  public static void createStruct(java.awt.geom.Path2D$Double);
  public static void createStruct(java.awt.geom.Path2D$Double, int);
  public static void createStruct(JGDS2.GArea);
  public static void createStruct(JGDS2.GArea, double, double, double);
  public static void createStruct(java.util.ArrayList<JGDS2.GArea>);
  public static void createStruct(java.util.ArrayList<JGDS2.GArea>, boolean);
  public static void createStruct(java.util.ArrayList<JGDS2.GArea>, double, double);
  public static void createStruct(java.util.ArrayList<JGDS2.GArea>, double, double, double);
  public static boolean structExists(java.lang.String);
  public static void createPoints2Instance(java.util.ArrayList<java.lang.Double>);
  public static java.awt.geom.Path2D$Double mergePoints(java.util.ArrayList<java.lang.Double>, java.awt.geom.Path2D$Double);
  public static double rescalePSimage(double);
  public static void createPolyPath(java.util.ArrayList<java.lang.Double>);
  public static JGDS2.GArea createPolyPathGArea(java.util.ArrayList<java.lang.Double>);
  public static void createVectorShapes(java.util.ArrayList<java.lang.Double>, java.lang.String);
  public static void createPolygon(java.util.ArrayList<java.lang.Double>, java.lang.String);
  public static void clearStructs();
  public static int um2nmConversion(double);
  public static double nm2umConversion(int);
  public static double degreeToRadians(double);
  public static java.awt.geom.Path2D$Double describeCurrentSegment(java.awt.geom.PathIterator, java.awt.geom.Path2D$Double, boolean);
  public static void createCircleThree(java.util.ArrayList<java.lang.Double>);
  public static void createCircleThreeLog(java.util.ArrayList<java.lang.Double>, java.util.ArrayList<java.lang.Double>);
  public static void exportLogFile() throws java.io.IOException;
  public java.lang.String exportGDS(java.util.Scanner, java.lang.String[]) throws java.io.IOException, java.io.FileNotFoundException, javax.script.ScriptException;
  public static void commandLineExportGDS(java.util.Scanner, java.lang.String[]) throws java.io.IOException, java.lang.Exception;
  static javafx.scene.control.Label access$000(CNSTnanoToolbox.scripting.CNSTscriptingController);
  static {};
}
Compiled from "CircleThree.java"
public class CNSTnanoToolbox.scripting.CircleThree$Circle {
  final CNSTnanoToolbox.scripting.CircleThree$Point center;
  final double radius;
  public CNSTnanoToolbox.scripting.CircleThree$Circle(CNSTnanoToolbox.scripting.CircleThree$Point, double);
  public double getRadius();
  public CNSTnanoToolbox.scripting.CircleThree$Point getCenter();
  public java.lang.String toString();
}
Compiled from "CircleThree.java"
public class CNSTnanoToolbox.scripting.CircleThree$Point {
  final double x;
  final double y;
  public CNSTnanoToolbox.scripting.CircleThree$Point(double, double);
  public java.lang.String toString();
}
Compiled from "CircleThree.java"
public class CNSTnanoToolbox.scripting.CircleThree {
  static final double TOL;
  public CNSTnanoToolbox.scripting.CircleThree();
  public static CNSTnanoToolbox.scripting.CircleThree$Circle circleFromPoints(CNSTnanoToolbox.scripting.CircleThree$Point, CNSTnanoToolbox.scripting.CircleThree$Point, CNSTnanoToolbox.scripting.CircleThree$Point);
}
Compiled from "AlignmentMarks.java"
public class CNSTnanoToolbox.shapeMethods.AlignmentMarks {
  public CNSTnanoToolbox.shapeMethods.AlignmentMarks();
  public static JGDS2.GArea createAlignCross(double, double, int);
  public static JGDS2.GArea createAlignCross(double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createAlignVernLb1(int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlignVernLb2(int, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlign3Level(int, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createAlignVern(int, int, double, boolean, boolean, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createAlignFFFB1(int, int);
  public static java.util.ArrayList<JGDS2.GArea> createAlignFFFB2(int, int);
  public static JGDS2.GArea createAlignVerniers(double, double, int, double);
  public static JGDS2.GArea createAlignLabel(int, double, double);
  public static void addAlignGAreas(JGDS2.Struct, java.util.ArrayList<JGDS2.GArea>);
  public static JGDS2.GArea createAlignRotate90GAreas(JGDS2.GArea);
  public static JGDS2.GArea createAlignInverse(double, double, JGDS2.GArea, int);
}
Compiled from "AlignmentMarksCustom.java"
public class CNSTnanoToolbox.shapeMethods.AlignmentMarksCustom {
  public CNSTnanoToolbox.shapeMethods.AlignmentMarksCustom();
  public static JGDS2.GArea createCustomCross(double, double, double, double, double, double, double, double, double, boolean, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCustomVerniers(int, int, double, double, double, double, double, boolean, boolean, double, double);
  public static JGDS2.GArea createCustomVerniers(double, double, double, int, double);
}
Compiled from "CNSTnistLogos.java"
public class CNSTnanoToolbox.shapeMethods.CNSTnistLogos {
  public CNSTnanoToolbox.shapeMethods.CNSTnistLogos();
  public static JGDS2.GArea getNistCnstLogo(double, double, double, double, int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea getCnstLogo(double, double, double, double, int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea getNistLogo(double, double, double, double, int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea getCNSTemblemLogo(double, double, double, double, int) throws java.io.FileNotFoundException;
  public static JGDS2.GArea createCNSTlogo(double, double, int);
  public static JGDS2.GArea combineGAreas(JGDS2.GArea, JGDS2.GArea, int);
}
Compiled from "CNSTreticleFrames.java"
public class CNSTnanoToolbox.shapeMethods.CNSTreticleFrames {
  static final int ASMLPAS5500NIST;
  static final int CONTACT5INCH;
  static final int CONTACT7INCH;
  public CNSTnanoToolbox.shapeMethods.CNSTreticleFrames();
  public static java.util.ArrayList<JGDS2.GArea> createReticleFrame(int, java.lang.String, java.lang.String, java.lang.String, int) throws java.io.FileNotFoundException;
}
Compiled from "CurvedBeamsNEMS.java"
public class CNSTnanoToolbox.shapeMethods.CurvedBeamsNEMS {
  public CNSTnanoToolbox.shapeMethods.CurvedBeamsNEMS();
  public static void createCurvedBeamNEMS(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, double, double, double, boolean, int);
  public static double calculateShape(double, double, double);
  static double arcL(double, double, double);
  public static double adaptive(double, double, double, double);
  public static java.util.ArrayList<java.lang.Double> calculateSegments(int, double, double, double, double);
  public static void addGAreaToStruct(java.util.ArrayList<JGDS2.GArea>, JGDS2.Struct, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createCurvedStructures(java.util.ArrayList<JGDS2.GArea>, double, double, double, int, int, double, double, double, double, double, double, double, boolean);
  public static JGDS2.GArea createTopElectrode(double, double, double, double, double, int);
  public static JGDS2.GArea createTriangle(double, double, double, int, boolean);
  public static JGDS2.GArea createCurvedBeam(java.util.ArrayList<java.lang.Double>, java.util.ArrayList<java.lang.Double>, double, int);
}
Compiled from "Fractals.java"
public class CNSTnanoToolbox.shapeMethods.Fractals {
  public CNSTnanoToolbox.shapeMethods.Fractals();
  public static JGDS2.Struct createSierpinskiTriangle(int, double, int, java.lang.String);
  public static JGDS2.Struct createSierpinskiCarpet(int, double, int, java.lang.String);
  public static JGDS2.Struct createCurvedTree(java.lang.String, double, double, int, int);
  public static JGDS2.Struct createVicsekSaltire(int, double, int, java.lang.String);
  public static JGDS2.Struct createVicsekCross(int, double, int, java.lang.String);
  public static JGDS2.Struct createAnotherTree(java.lang.String, int, int);
  public static JGDS2.Struct tree(double, double, double, int, java.lang.String, int);
}
Compiled from "FractureShapes.java"
public class CNSTnanoToolbox.shapeMethods.FractureShapes {
  public CNSTnanoToolbox.shapeMethods.FractureShapes();
  public static java.util.ArrayList<JGDS2.GArea> fractureShapeQuadrants(JGDS2.GArea);
}
Compiled from "FunctionPlot.java"
public class CNSTnanoToolbox.shapeMethods.FunctionPlot {
  public CNSTnanoToolbox.shapeMethods.FunctionPlot();
  public static java.util.ArrayList<JGDS2.GArea> createFunctionPlot(boolean, java.lang.String, java.lang.String[]) throws javax.script.ScriptException;
  public static java.util.ArrayList<java.awt.geom.Point2D$Double> calculatePointsDX(javax.script.ScriptEngine, java.lang.String, double, double, int) throws javax.script.ScriptException;
  public static java.util.ArrayList<java.awt.geom.Point2D$Double> calculatePointsRT(javax.script.ScriptEngine, java.lang.String, double, double, int) throws javax.script.ScriptException;
  public static JGDS2.GArea createShape(java.util.ArrayList<java.awt.geom.Point2D$Double>, double);
  public static java.util.ArrayList<JGDS2.GArea> fractureShape(JGDS2.GArea);
}
Compiled from "Grayscale.java"
public class CNSTnanoToolbox.shapeMethods.Grayscale {
  public CNSTnanoToolbox.shapeMethods.Grayscale();
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleLinearNGON(double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleCustomNGON(java.util.ArrayList<java.lang.Double>);
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleLinearRECT(double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleCustomRECT(java.util.ArrayList<java.lang.Double>);
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleLinearRAMPupDown(double, double, int, boolean);
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleLinearRAMP(double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleCustomRAMPupDown(java.util.ArrayList<java.lang.Double>, boolean);
  public static java.util.ArrayList<JGDS2.GArea> createGrayScaleCustomRAMP(java.util.ArrayList<java.lang.Double>);
  public static java.util.ArrayList<JGDS2.GArea> grayScaleOverlappingARCs(double, double, int, int, int);
  public static java.util.ArrayList<JGDS2.GArea> grayScaleARCs(double, double, int, int);
  public static JGDS2.GArea createTorus(double, double, double, double, double, double, int, int);
}
Compiled from "LabelColors.java"
public class CNSTnanoToolbox.shapeMethods.LabelColors {
  public CNSTnanoToolbox.shapeMethods.LabelColors();
  public static javafx.scene.paint.Color getLabelColor();
  public static javafx.scene.paint.Color getTwoLabelColors(int);
}
Compiled from "LabelMaker.java"
public class CNSTnanoToolbox.shapeMethods.LabelMaker {
  public CNSTnanoToolbox.shapeMethods.LabelMaker();
  public static void parseLabel(java.lang.String[], java.lang.String, JGDS2.Struct);
  public static void createAutoOuterLetters(int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, boolean);
  public static void createAutoRowColumnLetters(int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, boolean);
  public static void createAutoOuter(int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, boolean);
  public static void createAutoRowColumn(int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, boolean);
  public static void createOuter(java.lang.String[], int, int, java.lang.String, double, double, double, double, double, double, double, JGDS2.Struct, boolean);
  public static void createRowColumn(java.lang.String[], int, int, java.lang.String, double, double, double, double, double, JGDS2.Struct, boolean);
  public static java.lang.String[] letterArray(int);
  public static JGDS2.GArea createTextAreas(java.lang.String, java.lang.String, double, double, double);
  public static void createOutlineStruct(java.util.ArrayList<JGDS2.GArea>, JGDS2.Struct);
}
Compiled from "MEMSactuators.java"
public class CNSTnanoToolbox.shapeMethods.MEMSactuators {
  public CNSTnanoToolbox.shapeMethods.MEMSactuators();
  public static java.util.ArrayList<JGDS2.GArea> createGear(double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLinearDriveV1(double, double, double, double, double, int, double, double, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCombDriveV1(double, double, double, double, int, double, double, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createRadialCombDriveV1(double, double, double, double, double, double, int, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createRadialCombDriveV2(double, double, double, double, double, double, int, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBentBeam(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBentBeamArray(double, double, double, double, double, double, double, int, double, double, double, int, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createStraightSpring(double, double, double, double, int, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCircularSpring(double, double, double, double, int, int, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createStraightSpringElectrodes(double, double, double, double, int, int, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createCircularSpringElectrode(double, double, double, double, int, int, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring1A2A(double, double, double, double, double, int, double, double, double, int, boolean);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring1B2B(double, double, double, double, double, int, double, double, double, int, boolean);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2C(double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2D(double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2E(double, double, double, double, double, int, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2F(double, double, double, double, double, int, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2G(double, double, double, double, double, int, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2H(double, double, double, double, double, int, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2I(double, double, double, double, double, int, int, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFoldedSpring2J(double, double, double, double, double, int, int, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBiMorphThermal(double, double, double, double, double, double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createBolometerL(double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, int, int, int, int, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createBolometerU(double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, int, int, int, int, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createFluidCell(double, double, double, double, double, double, double, double, double, double, double, int, double, double, double, double, double, double, double, double, double, int, int, int, int, int, int);
}
Compiled from "MEMSbeams.java"
public class CNSTnanoToolbox.shapeMethods.MEMSbeams {
  public CNSTnanoToolbox.shapeMethods.MEMSbeams();
  public static java.util.ArrayList<JGDS2.GArea> createCantileverLinear(double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverPercentage(double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverSinusoid(double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverLinearSE(double, double, double, double, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverNonLinearSE(double, double, double, double, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createCantileverCustom(java.util.ArrayList<java.lang.Double>);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamLinear(double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamPercentage(double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamLinearSE(double, double, double, double, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamNonLinearSE(double, double, double, double, int, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamCustom(java.util.ArrayList<java.lang.Double>);
  public static JGDS2.GArea createCantileverBase(double, double, double, double, int);
  public static double[] calculateRampNonLinearSE(double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverSRect(double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverSTriangle(double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverSTrapezoid(double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverSPaddle(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverSCurvedHalf(double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverSCurvedFull(double, double, int, double, double, double, double, int);
  public static void createSAnchor(java.util.ArrayList<JGDS2.GArea>, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverHRect(double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverHTriangle(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverHTrapezoid(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverHPaddle(double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverHCurvedHalf(double, double, int, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverHCurvedFull(double, double, int, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverPB2(double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverPB3(double, double, double, double, double, double, double, double, double, int);
  public static void createPBAnchor(java.util.ArrayList<JGDS2.GArea>, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverUR(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverUCF(double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverUC(double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverUCC(double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverUCP(double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverCE(double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLeverCEPaddle(double, double, double, double, double, double, int, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamR(double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamCoupledBeams(double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamTorsional(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamTorsional2(double, double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDcBeamC(double, double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createGuckelRing(double, double, int, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createGuckelRingArray(double, double, double, double, int, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createDiamondRing(double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createBeamCurvedEnds(double, double, double, int, boolean, boolean);
}
Compiled from "MEMScoupledArrays.java"
public class CNSTnanoToolbox.shapeMethods.MEMScoupledArrays {
  public CNSTnanoToolbox.shapeMethods.MEMScoupledArrays();
  public static java.util.ArrayList<JGDS2.GArea> createRTElectrode(int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, boolean);
  public static java.util.ArrayList<JGDS2.GArea> createRT2CoupledBeams(int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createRectElectrode(int, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createRectVaryingElectrode(int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, boolean);
  public static java.util.ArrayList<JGDS2.GArea> createTrapElectrodesVLW(int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createTrapElectrodesCONST(int, double, double, double, double, double, double, double, double, double, double, int, int, int, int);
  public static void createRTElectrodeSTR(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double, boolean);
  public static void createRT2CoupledBeamsSTR(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createRectElectrodeSTR(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createRectVaryingElectrodeSTR(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double, boolean);
  public static void createTrapElectrodesVLWSTR(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static void createTrapElectrodesCONSTSTR(JGDS2.Struct, java.lang.String, double, double, int, double, double, double, double, double, double, double, double, double, double, int, int, int, int, double);
  public static JGDS2.GArea createCircle(double, int, int);
  public static JGDS2.GArea createTrapezoidalBeam(double, double, double, int, boolean);
  public static JGDS2.GArea createTrapezoidSideElectrodes(double, double, double, double, double, int, boolean);
  public static JGDS2.GArea createBackSide(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createBackSide(double, double, double, double, double, double, double, double, int, boolean);
  public static JGDS2.GArea createVaryingElectrode(int, double, double, double, double, double, double, double, double, int, boolean, boolean);
}
Compiled from "MEMSflexureHinges.java"
public class CNSTnanoToolbox.shapeMethods.MEMSflexureHinges {
  public CNSTnanoToolbox.shapeMethods.MEMSflexureHinges();
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges4A(double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges4B(double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges4C(double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges4D(double, double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges4E(double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges2A(double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges2B(double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges2C(double, double, double, double, double, double, double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges2D(double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFlexureHinges2E(double, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createFlexureAnchor(double, double, double, double, int);
}
Compiled from "MISCobjects.java"
public class CNSTnanoToolbox.shapeMethods.MISCobjects {
  public CNSTnanoToolbox.shapeMethods.MISCobjects();
  public static JGDS2.GArea createRectangleTaper(double, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createArrowJunction(double, double, double, double, double, int, double);
  public static java.util.ArrayList<JGDS2.GArea> createHjunction(double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createTjunction(double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createResoTestPatterns(double, double, int, boolean);
  public static java.util.ArrayList<JGDS2.GArea> createInteElectrodesV1(double, double, double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createInteElectrodesV2(double, double, double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createInteElectrodesV3(double, double, double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createInteElectrodesV4(double, double, double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createInteElectrodesV5(double, double, double, double, double, int, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createRectangularSpiral(double, double, double, int);
  public static void createRandomPolygons(JGDS2.Struct, java.lang.String, double, double, double, double, double, int, double, int, int, boolean);
  public static void createRandomEllipses(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, double, int, int, boolean);
  public static void createRandomEllipsesV(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, double, int, int, boolean);
  public static java.util.TreeMap<java.lang.Double, java.lang.Double> generateCoordinates(double, double, double, double, int, int);
  static boolean testSeparation(double, double, double, java.util.Map<java.lang.Double, java.lang.Double>);
  public static java.util.ArrayList<JGDS2.GArea> createResoPatternRSA(double, double, double, double, int, double);
  public static JGDS2.GArea createResoPatternRS(double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createResoPatternLSA(double, double, double, double, int, double);
  public static JGDS2.GArea createResoPatternLS(double, double, int);
  public static JGDS2.GArea createResoPatternLshapeSingle(double, double, int);
  public static void arcSquareHexFill(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, double, double, int, double, boolean, boolean);
  public static void arcRadialFill(JGDS2.Struct, java.lang.String, double, double, double, double, double, int, double, double, double, double);
  public static void spinIceA(JGDS2.Struct, java.lang.String, double, double, double, double, double, double, int, int, int, boolean);
  public static JGDS2.GArea creatingEllipse(double, double, int, int, double, boolean);
  public static double degreeToRadians(double);
}
Compiled from "MeanderChannels.java"
public class CNSTnanoToolbox.shapeMethods.MeanderChannels {
  public CNSTnanoToolbox.shapeMethods.MeanderChannels();
  public static java.util.ArrayList<JGDS2.GArea> createMeanderChannels(double, double, double, double, double, double, int, int, double, double, double, int);
  public static java.awt.geom.Path2D$Double funcSine(java.awt.geom.Path2D$Double, double, double, int, double, double, double);
  public static void funcRamp(java.awt.geom.Path2D$Double, double, double, int, double, double);
  public static void funcTriangle(java.awt.geom.Path2D$Double, double, double, int, double, double);
  public static void funcSquare(java.awt.geom.Path2D$Double, double, double, int, double, double);
}
Compiled from "Photonics.java"
public class CNSTnanoToolbox.shapeMethods.Photonics {
  public CNSTnanoToolbox.shapeMethods.Photonics();
  public static JGDS2.GArea createSbend(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, double, double, double, int);
  public static JGDS2.GArea createSbend(java.awt.geom.Point2D$Double, double, double, double, double, double, int);
  public static JGDS2.GArea createSbendInv(double, double, double, double, double, double, double);
  public static JGDS2.GArea createSbendInvSlot(double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createYbend(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, double, double, double, int);
  public static JGDS2.GArea createYbend(java.awt.geom.Point2D$Double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createYbendInv(double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createYbendInvSlot(double, double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea create90degreeBend(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea create90degreeBendLH(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createYBend90(double, double, double, int);
  public static JGDS2.GArea createYBendInv90(double, double, double, double, int);
  public static JGDS2.GArea createYBendInvSlot90(double, double, double, double, double, int);
  public static JGDS2.GArea create90degreeInv(double, double, double, double, double, double, double);
  public static JGDS2.GArea create90degreeInvSlot(double, double, double, double, double, double, double, double);
  public static JGDS2.GArea create180bend(double, double, double, double, int);
  public static JGDS2.GArea create180bendInverse(double, double, double, double, double, int);
  public static JGDS2.GArea create180bendInverseSlot(double, double, double, double, double, double, int);
  public static JGDS2.GArea createLinearTaper(double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLinearTaperSlot(double, double, double, double, double, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createLinearTaperInvSlot(double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createWaveGuide(double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createWaveGuideSlot(double, double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createWaveGuideInv(double, double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createWaveGuideInvSlot(double, double, double, double, double, double, double, double, int, int, int);
  public static JGDS2.GArea createCustomTaper(java.util.ArrayList<java.lang.Double>, int);
  public static JGDS2.GArea createExponentialTaper(java.util.ArrayList<java.lang.Double>, double, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createExpTaperInvSlot(double, double, double, double, double, int, double, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createExpTaperInv(double, double, double, double, double, int, double, double);
  public static java.util.ArrayList<java.lang.Double> addConstYValue(java.util.ArrayList<java.lang.Double>, java.lang.Double);
  public static java.util.ArrayList<java.lang.Double> nonLinStartEnd(double, double, double, int);
  public static JGDS2.GArea createBezierCurve(double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createBezierCurveInv(double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createBezierCurveInvSlot(double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createSbendTaper(double, double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createSbendFunnel(double, double, double, double, double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea getGAreaSBendTaper(java.util.ArrayList<java.lang.Double>, java.util.ArrayList<java.lang.Double>, int);
  public static JGDS2.GArea gAreaFromArrayList(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<java.lang.Double> flattenPath(java.awt.geom.Path2D$Double, double);
  public static double degreeToRadians(double);
  public static JGDS2.GArea addGareas(JGDS2.GArea, JGDS2.GArea, int);
  public static JGDS2.GArea subtractGareas(JGDS2.GArea, JGDS2.GArea, int);
}
Compiled from "PhotonicsDiscRingPulleys.java"
public class CNSTnanoToolbox.shapeMethods.PhotonicsDiscRingPulleys {
  public CNSTnanoToolbox.shapeMethods.PhotonicsDiscRingPulleys();
  public static void createInfiniteRingDisc(JGDS2.Struct, double, double, double, double, int, double, double, double, boolean, boolean, int);
  public static void createInfRingDiscDS(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, double, boolean, boolean, int);
  public static void createInfiniteRingDiscInverse(JGDS2.Struct, double, double, double, double, int, double, double, double, double, boolean, boolean, int);
  public static void createInfRingDiscInvDS(JGDS2.Struct, double, double, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, int);
  public static void createInfiniteRingDiscInversePos(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, boolean, boolean, int);
  public static void createInfRingDiscInvPosDS(JGDS2.Struct, double, double, double, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, int);
  public static void createSymmetricRingDisc(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, boolean, int);
  public static void createSymRingDiscDSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createSymmetricRingDiscInverse(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, boolean, int);
  public static void createSymRingDiscInvDSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createSymmetricRingDiscInversePos(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, boolean, boolean, int);
  public static void createSymRingDiscInvPosDSPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createPulleyRingDisc(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, boolean, int);
  public static void createPulRingDiscDSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createPulleyRingDiscInverse(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, boolean, boolean, int);
  public static void createPulRDInvDSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createPulleyRingDiscInversePos(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, boolean, boolean, int);
  public static void createPulRDInvPosDSPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createRDPulleyA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, boolean, boolean, int);
  public static void createRDPulADSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createRDSymmetricA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, boolean, boolean, int);
  public static void createRDSymADSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createRDPulleyInvA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, boolean, int);
  public static void createRDPulInvADSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createRDSymmetricInvA(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, boolean, boolean, int);
  public static void createRDSymInvADSPul(JGDS2.Struct, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createRDPulleyInvPosA(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, boolean, boolean, int);
  public static void createRDPulInvPosADSPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static void createRDSymmetricInvPosA(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, boolean, boolean, int);
  public static void createRDSymInvPosADSPul(JGDS2.Struct, double, double, double, double, double, int, double, double, int, double, double, double, double, double, double, double, double, boolean, boolean, boolean, int);
  public static JGDS2.GArea createPulleyA(double, double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createSymmetricA(double, double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createSshapeArc(double, double, double, double, int, double, double, int);
  public static JGDS2.GArea createDisc(double, double, double, int, int);
  public static JGDS2.GArea createRing(double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createSymmetricTorus(double, double, double, double, double, int, int);
  public static JGDS2.GArea createBezier(double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createLeftEndCap(double, double, double, double);
  public static java.awt.geom.Point2D$Double calculateArcEndCapPosition(double, double, double, double, double);
  public static JGDS2.GArea combineGarea(JGDS2.GArea, JGDS2.GArea, int);
  public static JGDS2.GArea mirrorGarea(JGDS2.GArea, int);
  public static double degreeToRadians(double);
}
Compiled from "PhotonicsGratingCouplers.java"
public class CNSTnanoToolbox.shapeMethods.PhotonicsGratingCouplers {
  public CNSTnanoToolbox.shapeMethods.PhotonicsGratingCouplers();
  public static java.util.ArrayList<JGDS2.GArea> createGratingCouplerWaveguideEC(double, double, double, double, double, double, double, double, double, double, double, int, int, int, int, boolean, boolean);
  public static JGDS2.GArea createApodizedGrating(double, double, double, double, double, double, double, double, double, double, double, double, double);
  public static double[][] apodizedGrating(double[], double[], double[], double, double);
  public static double meanArrayValue(double[][], int);
  public static JGDS2.GArea createDirectionalCoupler1(double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createDirectionalCoupler2(double, double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createDirectionalCoupler3(double, double, double, double, double, double, int);
  public static JGDS2.GArea createDirectionalCouplerUshape(double, double, double, double, double, int);
  public static JGDS2.GArea createDirectionalCoupler4(double, double, double, double, double, double);
  public static JGDS2.GArea createDirectionalCouplerSbend(double, double, double, double, double);
}
Compiled from "PhotonicsWaveGuides.java"
public class CNSTnanoToolbox.shapeMethods.PhotonicsWaveGuides {
  public CNSTnanoToolbox.shapeMethods.PhotonicsWaveGuides();
  public static JGDS2.GArea createWaveGuideExpander(double, double, double, double, double, double, double, double, double);
  public static java.util.ArrayList<java.lang.Double> calculateGap(java.util.ArrayList<java.lang.Double>, double, double, double, double);
  public static double erf(double);
  public static java.util.ArrayList<JGDS2.GArea> createWgInvPhC(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgInvPhCvary(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgPhC(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgPhCvary(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgInvRectPhC(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgInvRectPhCvary(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgRectPhC(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgRectPhCvary(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgInvRectFlushPhC(java.util.ArrayList<java.lang.Double>, int);
  public static java.util.ArrayList<JGDS2.GArea> createWgRectFlushPhC(java.util.ArrayList<java.lang.Double>, int);
  public static JGDS2.GArea createInverseWaveGuidePhC(double, double, int, int, double, double, double, double);
  public static JGDS2.GArea createInverseRectCenteredWgPhC(double, double, int, double, double, double, double);
  public static JGDS2.GArea createInverseRectFlushWgPhC(double, double, int, double, double, double, double, double);
  static JGDS2.GArea createRectFlushWgPhC(double, double, int, double, double, double, double, double);
  public static JGDS2.GArea createRectCenteredWgPhC(double, double, int, double, double, double, double);
  public static JGDS2.GArea createWgPhCelement(double, double, int, int, double, double);
  public static double getTotalPitch(java.util.ArrayList<java.lang.Double>);
  public static JGDS2.GArea createRaceTrack(double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createRectangle(double, double, int, double, double);
  public static JGDS2.GArea createTorus(double, double, double, double, double, double, double, int, int);
  public static JGDS2.GArea CircleEllipseArea(double, double, double, double, int, int);
  public static double degreeToRadians(double);
}
Compiled from "PhotonicsWgDcThomasVladimir.java"
public class CNSTnanoToolbox.shapeMethods.PhotonicsWgDcThomasVladimir {
  public CNSTnanoToolbox.shapeMethods.PhotonicsWgDcThomasVladimir();
  public static JGDS2.GArea createWgdcd1(double, int, double, double, double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createWgdcd2(double, int, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createWgdcd3(double, int, double, double, double, double, double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createWgdcd4(double, int, double, double, double, double, double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createWgdcd5(double, int, double, double, double, double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createWgdcd6(double, int, double, double, double, double, double, double, double, double, double, double, double, double, double);
  public static JGDS2.GArea createWgdcd7(double, double, int, double, double, double, double, double, double, double, double, double);
  public static java.util.ArrayList<JGDS2.GArea> createWgdcd8(double, double, double, double, double, double, double, double, double, double, double, double, double, int, int, int);
}
Compiled from "PostScript.java"
public class CNSTnanoToolbox.shapeMethods.PostScript {
  public CNSTnanoToolbox.shapeMethods.PostScript();
  public static java.util.ArrayList<JGDS2.GArea> createPostScript(java.lang.String, int);
  public static java.awt.geom.Path2D$Double parsePostScipt(java.util.ArrayList<java.lang.Double>, java.lang.String, java.awt.geom.Path2D$Double);
  public static java.util.ArrayList<JGDS2.GArea> fracturePostScript(JGDS2.GArea, int, int);
  public static double rescalePSimage(double);
}
Compiled from "PrimitiveShapes.java"
public class CNSTnanoToolbox.shapeMethods.PrimitiveShapes {
  public CNSTnanoToolbox.shapeMethods.PrimitiveShapes();
  public static JGDS2.GArea createArrowHead(double, double, double);
  public static JGDS2.GArea createArrow(double, double, double, double);
  public static JGDS2.GArea createArrowLinearArray(double, double, double, double, int);
  public static JGDS2.GArea createEllipse(double, double, double, double, int, int);
  public static JGDS2.GArea createSemiCircle(double, int, int);
  public static JGDS2.GArea createArc(double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createTorus(double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createTorusW(double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createTorusEllipseW(double, double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createTorusEllipseFocusW(double, double, double, double, double, double, double, int, int);
  public static JGDS2.GArea createCircleWave(double, int, double, int);
  public static JGDS2.GArea createTorusWaveIN(double, double, int, double, int);
  public static JGDS2.GArea createTorusWaveOUT(double, double, int, double, int);
  public static double degreeToRadians(double);
  public static JGDS2.GArea createCross(double, double, double, double, int);
  public static JGDS2.GArea createLshape(double, double, double, double, double, double, int);
  public static JGDS2.GArea createRectangularSUshape(double, double, double, double);
  public static JGDS2.GArea createRectangle(java.util.ArrayList<java.lang.Double>, int);
  public static JGDS2.GArea createRectangleLH(java.util.ArrayList<java.lang.Double>, int);
  public static JGDS2.GArea createRectangleC(java.util.ArrayList<java.lang.Double>, int);
  public static void createGratings(JGDS2.Struct, java.lang.String, double, double, double, double, double, int, int);
  public static void createPhC(JGDS2.Struct, java.lang.String, double, double, double, double, int, int, int, double, boolean, boolean);
  public static void createPillarHoleArray(JGDS2.Struct, java.lang.String, double, double, double, double, int, double, double, int, int, double, boolean, boolean, boolean, boolean);
  public static JGDS2.GArea rotateGArea(JGDS2.GArea, double, double, double);
  public static JGDS2.GArea createTrapezoid(double, double, double, double, double, double, double, double, int);
  public static JGDS2.GArea createVectorShape(java.awt.Shape, int);
  public static java.awt.geom.Path2D$Double describeCurrentSegment(java.awt.geom.PathIterator, java.awt.geom.Path2D$Double, boolean);
  public static double nm2umConversion(int);
}
Compiled from "RegularPolygon.java"
public class CNSTnanoToolbox.shapeMethods.RegularPolygon extends java.awt.Polygon {
  public CNSTnanoToolbox.shapeMethods.RegularPolygon(int, int, int, int);
  public CNSTnanoToolbox.shapeMethods.RegularPolygon(int, int, int, int, double);
  protected static int[] getXCoordinates(int, int, int, int, double);
  protected static int[] getYCoordinates(int, int, int, int, double);
}
Compiled from "Spirals.java"
public class CNSTnanoToolbox.shapeMethods.Spirals {
  public CNSTnanoToolbox.shapeMethods.Spirals();
  public static java.util.ArrayList spiralArchimedes(double, int, double, double, int);
  public static java.util.ArrayList spiralFermat(double, int, double, double, int);
  public static java.util.ArrayList spiralLogarithmic(double, int, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> archimedesSpiralDelayLine(double, double, double, int, double, double, double, double, int, int);
  public static java.awt.geom.Point2D$Double addSpiralDelayLineLength(java.util.ArrayList<java.awt.geom.Point2D$Double>, double);
  public static java.util.ArrayList<JGDS2.GArea> archimedesSpiralDelayLineV2(double, int, double, int, int, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> archimedesSpiralDelayLineInvV2(double, int, double, int, int, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> fermatSpiralDelayLine(double, double, double, int, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> archimedesSpiralDelayLineINVERSE(double, double, double, double, int, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> fermatSpiralDelayLineINVERSE(double, double, double, double, int, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> createFracturedSpiralDelayLineINVERSE(java.util.ArrayList<java.awt.geom.Point2D$Double>, double, double, double, double, double, int, int);
  public static java.util.ArrayList<JGDS2.GArea> archimedesV2FracturedDelayLineINVERSE(java.util.ArrayList<JGDS2.GArea>, java.util.ArrayList<JGDS2.GArea>, double, double, double, int);
  public static java.util.ArrayList<JGDS2.GArea> createFracturedSpiralDelayLines(java.util.ArrayList<java.awt.geom.Point2D$Double>, double, double, double, double, int, int);
}
Compiled from "StarPolygon.java"
public class CNSTnanoToolbox.shapeMethods.StarPolygon extends java.awt.Polygon {
  public CNSTnanoToolbox.shapeMethods.StarPolygon(int, int, int, int, int);
  public CNSTnanoToolbox.shapeMethods.StarPolygon(int, int, int, int, int, double);
  protected static int[] getXCoordinates(int, int, int, int, int, double);
  protected static int[] getYCoordinates(int, int, int, int, int, double);
}
Compiled from "TextOutline.java"
public class CNSTnanoToolbox.shapeMethods.TextOutline {
  public CNSTnanoToolbox.shapeMethods.TextOutline();
  public static java.util.ArrayList<JGDS2.GArea> textOutline(java.lang.String, java.lang.String, double, double, double, double, int, boolean);
  public static java.awt.geom.Rectangle2D findCenter(java.lang.String, java.lang.String, double, double, int);
  public static java.awt.geom.Path2D$Double currentSegmentMirrored(java.awt.geom.PathIterator, java.awt.geom.Path2D$Double);
}
Compiled from "Verniers.java"
public class CNSTnanoToolbox.shapeMethods.Verniers {
  public CNSTnanoToolbox.shapeMethods.Verniers();
  public static java.util.ArrayList<JGDS2.GArea> createVerniers(int, int, double, int, java.lang.String, java.lang.String, double, double, double, double, double);
}
Compiled from "CNSTdefaultParameters.java"
public class CNSTnanoToolbox.xml.CNSTdefaultParameters {
  public static java.lang.String openDir;
  public static java.lang.String saveToDir;
  public static java.lang.String[] subPos;
  public static java.lang.String[] aldPos;
  public static java.lang.String[] calPrm;
  public static java.lang.String[] path;
  public static java.lang.String subPosDefault;
  public static java.lang.String subSize;
  public static java.lang.String aldPosDefault;
  public static java.lang.String stdCur;
  public static java.lang.String pX;
  public static java.lang.String pY;
  public static java.lang.String qX;
  public static java.lang.String qY;
  public static java.lang.String m1X;
  public static java.lang.String m1Y;
  public static java.lang.String m2X;
  public static java.lang.String m2Y;
  public static java.lang.String m3X;
  public static java.lang.String m3Y;
  public static java.lang.String m4X;
  public static java.lang.String m4Y;
  public static java.lang.String glmpW;
  public static java.lang.String glmpL;
  public static java.lang.String glmqrsW;
  public static java.lang.String glmqrsL;
  public static java.lang.String chmW;
  public static java.lang.String chmL;
  public static java.lang.String status;
  public CNSTnanoToolbox.xml.CNSTdefaultParameters();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public static void getFileParameters() throws java.lang.Exception;
  public static void getJEOL6300Parameters() throws java.lang.Exception;
  public static boolean cssFileExists() throws java.io.FileNotFoundException;
}
Compiled from "CNSTxml.java"
public class CNSTnanoToolbox.xml.CNSTxml {
  public static java.lang.String[] subPos;
  public static java.lang.String[] aldPos;
  public static java.lang.String[] calPrm;
  public static java.lang.String[] path;
  public static java.lang.String subPosDefault;
  public static java.lang.String subSize;
  public static java.lang.String aldPosDefault;
  public static java.lang.String stdCur;
  public static java.lang.String pX;
  public static java.lang.String pY;
  public static java.lang.String qX;
  public static java.lang.String qY;
  public static java.lang.String m1X;
  public static java.lang.String m1Y;
  public static java.lang.String m2X;
  public static java.lang.String m2Y;
  public static java.lang.String m3X;
  public static java.lang.String m3Y;
  public static java.lang.String m4X;
  public static java.lang.String m4Y;
  public static java.lang.String glmpW;
  public static java.lang.String glmpL;
  public static java.lang.String glmqrsW;
  public static java.lang.String glmqrsL;
  public static java.lang.String chmW;
  public static java.lang.String chmL;
  public static java.lang.String openDir;
  public static java.lang.String saveToDir;
  public CNSTnanoToolbox.xml.CNSTxml();
  public static void main(java.lang.String[]) throws java.lang.Exception;
  public static void getArrayValue(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) throws java.lang.Exception;
  public static java.lang.String[] readArrayValue(org.w3c.dom.Document, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public static void setArrayValues(java.lang.String, java.lang.String[]);
}
Compiled from "Current.java"
public class Current implements JGDS2.Const {
  public Current();
  public static void main(java.lang.String[]);
  static JGDS2.Struct TestTop();
  static JGDS2.Struct TestK();
  static JGDS2.Struct TestH();
  static JGDS2.Struct angledArray(double, double, double, double, int);
}
Compiled from "GenFrame.java"
public class GenFrame implements JGDS2.Const {
  public GenFrame();
  public static void main(java.lang.String[]);
  static JGDS2.Struct zero();
  static JGDS2.Struct leads(double, double, boolean, boolean);
  static JGDS2.Struct tree(double, double, double, int);
}
Compiled from "Array.java"
public class JGDS2.Array extends JGDS2.Ref {
  int rows;
  int cols;
  double rxX;
  double rxY;
  double ryX;
  double ryY;
  public JGDS2.Array(JGDS2.Struct, double, double, int, int, double, double);
  public JGDS2.Array(JGDS2.Struct, double, double, int, int, double, double, double);
  public JGDS2.Array(JGDS2.Struct, double, double, int, int, double, double, double, double);
  public JGDS2.Array(JGDS2.Struct, double, double, int, int, double, double, double, double, double);
  public JGDS2.Array(JGDS2.Struct, double, double, int, int, double, double, int, double);
  final void init(JGDS2.Struct, double, double, int, int, double, double, double, double, double);
  short refType();
  void colRow(JGDS2.GDSWriter) throws java.io.IOException;
  void delta(JGDS2.GDSWriter) throws java.io.IOException;
  java.awt.geom.Area refArea(java.awt.geom.Area);
}
Compiled from "BarCode.java"
public class JGDS2.BarCode extends JGDS2.GArea implements JGDS2.Constants {
  java.lang.StringBuffer string;
  int tool;
  boolean labeled;
  java.awt.geom.AffineTransform at;
  public JGDS2.BarCode(java.lang.String, int, int);
  public JGDS2.BarCode(java.lang.String, int, int, boolean);
  public java.awt.geom.Area getArea();
}
Compiled from "Const.java"
public interface JGDS2.Const {
  public static final int ADDED;
  public static final int TANGENT;
  public static final int ZEROL;
  public static final int FROM;
  public static final int TO;
  public static final int THROUGH;
  public static final short BYTE;
  public static final short SHORT;
  public static final short LONG;
  public static final short BYTES;
  public static final short INT;
  public static final short STRUCT;
  public static final int MIRROR;
  public static final int ABS_MAG;
  public static final int ABS_ANG;
  public static final int FLUSH_CAP;
  public static final int ROUND_CAP;
  public static final int EXTEND_CAP;
  public static final short ANGLE;
  public static final short AREF;
  public static final short ATTRTABLE;
  public static final short BGNLIB;
  public static final short BGNSTR;
  public static final short BOUNDARY;
  public static final short BOX;
  public static final short BOXTYPE;
  public static final short COLROW;
  public static final short DATATYPE;
  public static final short ELFLAGS;
  public static final short ENDLIB;
  public static final short ENDEL;
  public static final short ENDMASK;
  public static final short ENDSTR;
  public static final short FONTS;
  public static final short FORMAT;
  public static final short GENERATIONS;
  public static final short HEADER;
  public static final short LAYER;
  public static final short LIBNAME;
  public static final short MAG;
  public static final short MASK;
  public static final short NODE;
  public static final short NODETYPE;
  public static final short PATH;
  public static final short PATHTYPE;
  public static final short PLEX;
  public static final short PRESENTATION;
  public static final short PROPATTR;
  public static final short PROPVALUE;
  public static final short REFLIBS;
  public static final short SNAME;
  public static final short SREF;
  public static final short STRANS;
  public static final short STRING;
  public static final short STRNAME;
  public static final short TAPENUM;
  public static final short TAPECODE;
  public static final short TEXT;
  public static final short TEXTTYPE;
  public static final short UNITS;
  public static final short WIDTH;
  public static final short XY;
}
Compiled from "Constants.java"
public interface JGDS2.Constants {
  public static final int SAVE;
  public static final int QUIT;
  public static final int CLOSE;
  public static final int PRINT;
  public static final boolean QUICK_RETURN;
  public static final boolean NORMAL_RETURN;
  public static final int AS200;
  public static final int ASML;
  public static final int CONTACT;
  public static final int ADVANCE;
  public static final int START;
  public static final int STOP;
  public static final int HEIGHT;
  public static final int BCWIDTH;
  public static final long[][] BARCODE;
  public static final java.lang.String DEFAULT_FILE_NAME;
  public static final java.awt.Color DEFAULT_ELEMENT_COLOR;
  public static final java.awt.Color SELECTED_COLOR;
  public static final java.awt.Color HIGHLIGHT_COLOR;
  static {};
}
Compiled from "DrawnElement.java"
public abstract class JGDS2.DrawnElement extends JGDS2.GDS2Element implements JGDS2.Const {
  int layer;
  int dataType;
  public JGDS2.DrawnElement();
  public double getRenderReso();
  public void setRenderReso(double);
  public void setDataType(int);
  public void setLayer(int);
}
Compiled from "GArbPath.java"
public class JGDS2.GArbPath$CutLine {
  boolean FROMCLOSED;
  boolean TOCLOSED;
  JGDS2.GArbPath$segment l;
  JGDS2.GArbPath$segment r;
  final JGDS2.GArbPath this$0;
  public JGDS2.GArbPath$CutLine(JGDS2.GArbPath);
  void cutTo(JGDS2.Intersection);
  public void close(JGDS2.Intersection);
}
Compiled from "GArbPath.java"
public class JGDS2.GArbPath$PathInfo {
  java.util.LinkedList<JGDS2.GArbPath$segment> segList;
  java.util.LinkedList<JGDS2.GArbPath$PathInfo> subPaths;
  JGDS2.GArbPath$segment startSeg;
  boolean CLOCKWISE;
  java.awt.geom.Rectangle2D$Double bounds;
  boolean exterior;
  final JGDS2.GArbPath this$0;
  public JGDS2.GArbPath$PathInfo(JGDS2.GArbPath);
  public JGDS2.GArbPath$PathInfo(java.util.LinkedList<JGDS2.GArbPath$segment>);
  public JGDS2.GArbPath$PathInfo(JGDS2.GArbPath, JGDS2.GArbPath$segment, java.awt.geom.Rectangle2D$Double);
  public JGDS2.GArbPath$PathInfo(java.util.LinkedList<JGDS2.GArbPath$segment>, java.util.LinkedList<JGDS2.GArbPath$PathInfo>, java.awt.geom.Rectangle2D$Double);
  public void set(int, JGDS2.GArbPath$PathInfo);
  public void setBounds(java.awt.geom.Rectangle2D$Double);
  public JGDS2.GArbPath$PathInfo get(int);
  int numberOfPaths();
  void echo();
  int size();
  public JGDS2.GArbPath$PathInfo newPath();
  java.util.LinkedList<JGDS2.GArbPath$segment> getGDSSegments();
  public void removeLast();
}
Compiled from "GArbPath.java"
public class JGDS2.GArbPath$SegDistance {
  JGDS2.GArbPath$segment seg;
  double dist;
  final JGDS2.GArbPath this$0;
  public JGDS2.GArbPath$SegDistance(JGDS2.GArbPath, JGDS2.GArbPath$segment, double);
}
Compiled from "GArbPath.java"
public class JGDS2.GArbPath$pathP {
  java.util.ArrayList<java.lang.Integer> in;
  int depth;
  int num;
  final JGDS2.GArbPath this$0;
  public JGDS2.GArbPath$pathP(JGDS2.GArbPath, int);
  public void contains(int);
  public void contained();
  public boolean notContained();
  public int getIn(int);
  public void removeContainedPaths(JGDS2.GArbPath$pathP[]);
  public int sizeInner();
  public void setDepth(int);
}
Compiled from "GArbPath.java"
public class JGDS2.GArbPath$segment {
  double x;
  double y;
  int op;
  JGDS2.GArbPath$segment next;
  final JGDS2.GArbPath this$0;
  public JGDS2.GArbPath$segment(JGDS2.GArbPath, int, double, double);
  public JGDS2.GArbPath$segment(JGDS2.GArbPath, int, double, double, JGDS2.GArbPath$segment);
  JGDS2.GArbPath$segment copy();
  boolean sameXY(JGDS2.GArbPath$segment);
  void copy(JGDS2.GArbPath$segment);
  JGDS2.GArbPath$segment setOpNext(int, JGDS2.GArbPath$segment);
  public java.lang.String toString();
}
Compiled from "GArbPath.java"
public class JGDS2.GArbPath extends JGDS2.DrawnElement {
  public java.awt.geom.Path2D$Double a;
  public static int MAXPOINTS;
  static boolean VERTICAL;
  public JGDS2.GArbPath(int);
  public JGDS2.GArbPath(java.awt.geom.Path2D$Double, int);
  public JGDS2.GArbPath(java.awt.Shape, int);
  public JGDS2.GArbPath(JGDS2.GDS2, int);
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
  public java.awt.geom.Area getArea();
  public java.awt.geom.Area getArea(int);
  public void setArea(java.awt.geom.Area);
  public java.awt.geom.Path2D$Double getPath();
  public java.util.LinkedList<JGDS2.GArbPath$segment> gdsCompatibleSegmentList(java.awt.geom.Path2D$Double);
  public JGDS2.GArbPath$PathInfo PathToSegmentList(java.awt.geom.Path2D$Double, boolean, int);
  public java.awt.geom.Path2D$Double PathFromSegmentList(java.util.LinkedList<JGDS2.GArbPath$segment>);
  public java.util.LinkedList slice(java.util.LinkedList<JGDS2.GArbPath$segment>);
  java.util.LinkedList<JGDS2.GArbPath$segment> cutToSize(JGDS2.GArbPath$PathInfo);
  public int cutCost(java.util.LinkedList<JGDS2.Intersection>);
  public JGDS2.GArbPath$PathInfo dice(JGDS2.GArbPath$PathInfo);
  java.util.LinkedList<JGDS2.Intersection> intersectionsForSlice(java.util.LinkedList<JGDS2.Intersection>);
  java.util.LinkedList<JGDS2.GArbPath$PathInfo> cut(java.util.LinkedList<JGDS2.Intersection>);
  java.util.LinkedList<JGDS2.Intersection> intersections(JGDS2.GArbPath$PathInfo, java.awt.geom.Line2D$Double);
  public java.util.LinkedList cleanDuplicatePoints(java.util.LinkedList<JGDS2.GArbPath$segment>);
  public boolean InALine(JGDS2.GArbPath$segment, JGDS2.GArbPath$segment, JGDS2.GArbPath$segment);
  public java.util.ArrayList separateShapes(java.awt.Shape);
  public java.util.ArrayList shapeToListOfPaths(java.awt.Shape);
  public static void main(java.lang.String[]);
  public static java.awt.geom.Path2D$Double reversePath(java.awt.geom.Path2D$Double);
  public static void describeCurrentSegment(java.awt.geom.PathIterator, java.awt.Graphics2D);
  static {};
}
Compiled from "GArea.java"
public class JGDS2.GArea$pathP {
  java.util.ArrayList in;
  int depth;
  int num;
  final JGDS2.GArea this$0;
  public JGDS2.GArea$pathP(JGDS2.GArea, int);
  public boolean notContained();
  static void access$000(JGDS2.GArea$pathP, int);
  static void access$100(JGDS2.GArea$pathP);
  static void access$200(JGDS2.GArea$pathP, JGDS2.GArea$pathP[]);
  static int access$300(JGDS2.GArea$pathP, int);
}
Compiled from "GArea.java"
public class JGDS2.GArea$sI {
  JGDS2.GArea$segment seg;
  double dist;
  final JGDS2.GArea this$0;
  public JGDS2.GArea$sI(JGDS2.GArea, JGDS2.GArea$segment, double);
}
Compiled from "GArea.java"
public class JGDS2.GArea$segment {
  double x;
  double y;
  int op;
  final JGDS2.GArea this$0;
  public JGDS2.GArea$segment(JGDS2.GArea, int, double, double);
  boolean validSegment();
  public java.lang.String toString();
}
Compiled from "GArea.java"
public class JGDS2.GArea extends JGDS2.DrawnElement {
  public java.awt.geom.Area a;
  public JGDS2.GArea();
  public JGDS2.GArea(int);
  public JGDS2.GArea(JGDS2.GArea);
  public JGDS2.GArea(java.awt.geom.Area, int);
  public JGDS2.GArea(java.awt.Shape, int);
  public JGDS2.GArea(JGDS2.GDS2, int);
  public void setArea(java.awt.geom.Area);
  public <T extends JGDS2.GArea> T subtract(JGDS2.GDS2);
  public <T extends JGDS2.GArea> T subtract(JGDS2.GDS2, int);
  public <T extends JGDS2.GArea> T subtract(java.awt.geom.Area);
  public <T extends JGDS2.GArea> T subtract(java.awt.geom.Area, int);
  public <T extends JGDS2.GArea> T and(JGDS2.GDS2);
  public <T extends JGDS2.GArea> T and(JGDS2.GDS2, int);
  public <T extends JGDS2.GArea> T and(java.awt.geom.Area);
  public <T extends JGDS2.GArea> T and(java.awt.geom.Area, int);
  public <T extends JGDS2.GArea> T or(JGDS2.GDS2);
  public <T extends JGDS2.GArea> T or(JGDS2.GDS2, int);
  public <T extends JGDS2.GArea> T or(java.awt.geom.Area);
  public <T extends JGDS2.GArea> T or(java.awt.geom.Area, int);
  public <T extends JGDS2.GArea> T xor(JGDS2.GDS2);
  public <T extends JGDS2.GArea> T xor(JGDS2.GDS2, int);
  public <T extends JGDS2.GArea> T xor(java.awt.geom.Area);
  public <T extends JGDS2.GArea> T xor(java.awt.geom.Area, int);
  public <T extends JGDS2.GArea> T grow(double);
  public <T extends JGDS2.GArea> T grow(double, int, int);
  public <T extends JGDS2.GArea> T grow(java.lang.Double, int);
  public <T extends JGDS2.GArea> T grow(java.lang.Double, int, int, int);
  public java.awt.geom.Area grow(java.awt.geom.Area, double, int, int);
  public <T extends JGDS2.GArea> T transform(java.awt.geom.AffineTransform);
  public <T extends JGDS2.GArea> T transform(java.awt.geom.AffineTransform, int);
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
  public java.awt.geom.Area getArea();
  public java.awt.geom.Area getArea(int);
  public java.util.ArrayList describeSegments(java.awt.geom.Area);
  java.awt.geom.Area areaFromPathList(java.util.ArrayList<java.awt.geom.Path2D$Double>);
  public static java.awt.geom.Path2D$Double reversePath(java.awt.geom.Path2D$Double);
  public static void describeCurrentSegment(java.awt.geom.PathIterator, java.awt.Graphics2D);
}
Compiled from "GDS2.java"
public class JGDS2.GDS2$Loc {
  double x;
  double y;
  final JGDS2.GDS2 this$0;
  public JGDS2.GDS2$Loc(JGDS2.GDS2, double, double);
}
Compiled from "GDS2.java"
public abstract class JGDS2.GDS2 implements JGDS2.Const {
  static final double user;
  public static java.util.ArrayList<JGDS2.Struct> list;
  static long structNum;
  public JGDS2.GDS2();
  protected abstract void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
  void setRoot(JGDS2.GDS2);
  JGDS2.GDS2 getRoot();
  public abstract java.awt.geom.Area getArea();
  public abstract java.awt.geom.Area getArea(int);
  public static void setReso(double);
  public double getGrid();
  public static JGDS2.Struct getStructureNamed(java.lang.String);
  public double getReso();
  public void GDSDateOut(JGDS2.GDSWriter) throws java.io.IOException;
  public static int val(double);
  static {};
}
Compiled from "GDS2Element.java"
public abstract class JGDS2.GDS2Element extends JGDS2.GDS2 implements JGDS2.Const {
  public JGDS2.GDS2Element();
}
Compiled from "GDSInput.java"
public class JGDS2.GDSInput$Loc {
  double x;
  double y;
  final JGDS2.GDSInput this$0;
  public JGDS2.GDSInput$Loc(JGDS2.GDSInput, double, double);
}
Compiled from "GDSInput.java"
public class JGDS2.GDSInput$UnParsableException extends java.lang.Exception {
  final JGDS2.GDSInput this$0;
  public JGDS2.GDSInput$UnParsableException(JGDS2.GDSInput);
  public JGDS2.GDSInput$UnParsableException(JGDS2.GDSInput, java.lang.String);
}
Compiled from "GDSInput.java"
public class JGDS2.GDSInput {
  public JGDS2.GDSInput();
  public static void main(java.lang.String[]);
  public static java.lang.StringBuffer readFile(java.lang.String);
  public java.lang.StringBuffer parse(java.lang.String);
  public static java.lang.String showNum(byte[]);
  java.lang.String showSort(byte[]) throws JGDS2.GDSInput$UnParsableException;
  java.lang.String showHex(byte[]) throws JGDS2.GDSInput$UnParsableException;
  java.lang.String GDSlongTodouble(byte[]) throws JGDS2.GDSInput$UnParsableException;
  java.lang.String GDSlongTofloat(byte[]) throws JGDS2.GDSInput$UnParsableException;
  java.lang.String showInt(byte[]) throws JGDS2.GDSInput$UnParsableException;
  int getInt(byte[], int) throws JGDS2.GDSInput$UnParsableException;
  java.lang.String showShort(byte[]) throws JGDS2.GDSInput$UnParsableException;
  int getShort(byte[], int);
  public int floatToGDSint(float);
  public long doubleToGDSLong(float);
}
Compiled from "GDSReader.java"
public class JGDS2.GDSReader$Loc {
  double x;
  double y;
  final JGDS2.GDSReader this$0;
  public JGDS2.GDSReader$Loc(JGDS2.GDSReader, double, double);
}
Compiled from "GDSReader.java"
public class JGDS2.GDSReader$Tree {
  JGDS2.Struct c;
  final JGDS2.GDSReader this$0;
  public JGDS2.GDSReader$Tree(JGDS2.GDSReader, JGDS2.Struct);
  public void add(JGDS2.GDS2Element);
  public void push();
  public void pop();
}
Compiled from "GDSReader.java"
public class JGDS2.GDSReader$UnParsableException extends java.lang.Exception {
  final JGDS2.GDSReader this$0;
  public JGDS2.GDSReader$UnParsableException(JGDS2.GDSReader);
  public JGDS2.GDSReader$UnParsableException(JGDS2.GDSReader, java.lang.String);
}
Compiled from "GDSReader.java"
public class JGDS2.GDSReader {
  static JGDS2.Struct currentStruct;
  public JGDS2.GDSReader();
  public static void main(java.lang.String[]);
  public static java.lang.StringBuffer readFile(java.lang.String);
  public java.lang.StringBuffer parse(java.lang.String);
  public static java.lang.String showNum(byte[]);
  java.lang.String showSort(byte[]) throws JGDS2.GDSReader$UnParsableException;
  java.lang.String showHex(byte[]) throws JGDS2.GDSReader$UnParsableException;
  java.lang.String GDSlongTodouble(byte[]) throws JGDS2.GDSReader$UnParsableException;
  java.lang.String GDSlongTofloat(byte[]) throws JGDS2.GDSReader$UnParsableException;
  java.lang.String showInt(byte[]) throws JGDS2.GDSReader$UnParsableException;
  int getInt(byte[], int) throws JGDS2.GDSReader$UnParsableException;
  java.lang.String showShort(byte[]) throws JGDS2.GDSReader$UnParsableException;
  int getShort(byte[], int);
  public int floatToGDSint(float);
  public long doubleToGDSLong(float);
}
Compiled from "GDSWriter.java"
public class JGDS2.GDSWriter$GDSdata {
  int i;
  java.lang.Object o;
  final JGDS2.GDSWriter this$0;
  public JGDS2.GDSWriter$GDSdata(JGDS2.GDSWriter, int, java.lang.Object);
}
Compiled from "GDSWriter.java"
public class JGDS2.GDSWriter implements JGDS2.Const {
  java.util.Vector d;
  java.io.DataOutputStream dout;
  int l;
  public JGDS2.GDSWriter(java.io.DataOutputStream);
  public void printL(long);
  public static java.lang.String L(long);
  public static java.lang.String B(long);
  public int floatToGDSint(float);
  public static long doubleToGDSlong(double);
  public JGDS2.GDSWriter$GDSdata gd(int, java.lang.Object);
  public void add(long);
  public void add(java.lang.String);
  public void add(double);
  public void adds(int);
  public void addInt(int);
  public void add(short);
  public void write() throws java.io.IOException;
}
Compiled from "GPath.java"
public class JGDS2.GPath extends JGDS2.DrawnElement {
  java.awt.geom.Path2D$Double path;
  double width;
  int pathType;
  public JGDS2.GPath(java.awt.geom.Path2D$Double, double, int);
  public JGDS2.GPath(java.awt.geom.Path2D$Double, double, int, int);
  public java.awt.geom.Area getArea();
  public java.awt.geom.Area getArea(int);
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
}
Compiled from "Intersection.java"
public class JGDS2.Intersection implements java.lang.Comparable<JGDS2.Intersection>, JGDS2.Const {
  public static int right;
  public static boolean horizontal;
  public JGDS2.GArbPath$segment seg;
  public JGDS2.GArbPath$segment newSeg;
  public JGDS2.GArbPath$segment prev;
  JGDS2.GArbPath$PathInfo path;
  public JGDS2.Intersection(JGDS2.GArbPath$segment, JGDS2.GArbPath$segment, JGDS2.GArbPath$segment, JGDS2.GArbPath$PathInfo);
  public int compareTo(JGDS2.Intersection);
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
  static {};
}
Compiled from "Lib.java"
public class JGDS2.Lib extends JGDS2.Struct implements JGDS2.Const {
  double unit;
  public static double lamda;
  public JGDS2.Lib();
  void writeBody(JGDS2.GDSWriter) throws java.io.IOException;
  public void GDSOut(JGDS2.GDSWriter) throws java.io.IOException;
  public java.io.File GDSOut(java.lang.String);
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
  static {};
}
Compiled from "OldLib.java"
public class JGDS2.OldLib extends JGDS2.GDS2 implements JGDS2.Const {
  double unit;
  JGDS2.Struct lib;
  java.lang.String name;
  public static double lamda;
  public JGDS2.OldLib();
  public void sref(JGDS2.Struct, double, double);
  public void add(JGDS2.GDS2Element);
  void writeBody(JGDS2.GDSWriter) throws java.io.IOException;
  public java.awt.geom.Area getArea();
  public java.awt.geom.Area getArea(int);
  public void GDSOut(JGDS2.GDSWriter) throws java.io.IOException;
  public java.io.File GDSOut(java.lang.String);
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
  static {};
}
Compiled from "Part.java"
public class JGDS2.Part extends JGDS2.Struct implements JGDS2.Const {
  java.awt.geom.Rectangle2D$Double spacing;
  public JGDS2.Part(java.lang.String);
  public JGDS2.Part(java.lang.String, JGDS2.GDS2Element);
  public void setSpacing(java.awt.geom.Rectangle2D$Double);
  public java.awt.geom.Rectangle2D$Double getSpacing();
}
Compiled from "Rect.java"
public class JGDS2.Rect extends JGDS2.DrawnElement {
  double left;
  double right;
  double top;
  double bot;
  public JGDS2.Rect(double, double, double, double, int);
  void init(double, double, double, double, int);
  public java.awt.geom.Area getArea();
  public java.awt.geom.Area getArea(int);
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
}
Compiled from "RectArea.java"
public class JGDS2.RectArea extends JGDS2.GArea {
  public JGDS2.RectArea(double, double, double, double, int);
  void init(double, double, double, double, int);
}
Compiled from "Ref.java"
public class JGDS2.Ref extends JGDS2.GDS2Element implements JGDS2.Const {
  JGDS2.Struct sref;
  double angle;
  double mag;
  int mirror;
  double x;
  double y;
  public JGDS2.Ref();
  public JGDS2.Ref(JGDS2.Struct, double, double);
  public JGDS2.Ref(JGDS2.Struct, double, double, int);
  public JGDS2.Ref(JGDS2.Struct, double, double, int, double);
  public JGDS2.Ref(JGDS2.Struct, double, double, int, double, double);
  void init(JGDS2.Struct, double, double, int, double, double);
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
  short refType();
  void colRow(JGDS2.GDSWriter) throws java.io.IOException;
  void delta(JGDS2.GDSWriter) throws java.io.IOException;
  public void flip();
  public void setMag(double);
  public void setAngle(double);
  public java.awt.geom.Area getArea();
  public java.awt.geom.Area getArea(int);
  java.awt.geom.Area refArea(java.awt.geom.Area);
}
Compiled from "Struct.java"
public class JGDS2.Struct extends JGDS2.GDS2 implements JGDS2.Const {
  java.util.ArrayList<JGDS2.GDS2> struct;
  java.lang.String name;
  static int rec;
  int recLimit;
  static java.lang.String indent;
  public JGDS2.Struct();
  public JGDS2.Struct(java.lang.String);
  public JGDS2.Struct(java.lang.String, JGDS2.GDS2Element);
  public java.awt.geom.Area getArea();
  public java.awt.geom.Area getArea(int);
  void writeBody(JGDS2.GDSWriter) throws java.io.IOException;
  protected void GDSII(JGDS2.GDSWriter) throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void add(JGDS2.GDS2Element);
  public java.lang.String getName();
  static {};
}
Compiled from "StructList.java"
public class JGDS2.StructList<T> extends java.util.ArrayList {
  public JGDS2.StructList();
}
Compiled from "Text.java"
public class JGDS2.Text extends JGDS2.GArea {
  java.awt.Font font;
  java.lang.StringBuffer string;
  double defaultSize;
  double scale;
  public JGDS2.Text(java.lang.String, int, double);
  public JGDS2.Text(java.lang.String, int, java.awt.Font);
  public JGDS2.Text(java.lang.String, int, double, double);
  public void setText(java.lang.String);
  public void setScale(double);
  public static java.lang.String[] getFonts();
  public void setFont(java.lang.String);
  public void setFont(java.awt.Font);
  public void setFont(java.lang.String, int, double);
  public void setFontName(java.lang.String);
  public void setFontStyle(int);
  public void setFontSize(double);
  public double lookAtRR();
  public java.awt.geom.Area getArea();
}
Compiled from "segment.java"
public class JGDS2.segment {
  double x;
  double y;
  int op;
  public JGDS2.segment(int, double, double);
  boolean validSegment();
}
Compiled from "Motest.java"
public class Motest implements JGDS2.Const {
  static PartLib.MoParts L;
  public Motest();
  public static void main(java.lang.String[]);
  static JGDS2.Struct tArray(boolean, double, double, double, int, double, double);
  static JGDS2.Struct grate(double);
}
Compiled from "M.java"
public class PartLib.M {
  public static java.lang.String LIB_NAME;
  public static java.lang.String SHORT_NAME;
  public static double R1_1;
  public static double R1_2;
  public static double R1_3;
  public static double R1_4;
  public static double R2_1;
  public static double R2_2;
  public static double R2_3;
  public static double R2_4;
  public static double R2_5;
  public static double R3_1;
  public static double R3_2;
  public static double R3_2A;
  public static double R3_3;
  public static double R3_4;
  public static double R3_5;
  public static double R4_1;
  public static double R4_2;
  public static double R4_3;
  public static double R4_4;
  public static double R5_1;
  public static double R5_2;
  public static double R5_3;
  public static double R5_4;
  public static double R6_1;
  public static double R6_2;
  public static double R6_3;
  public static double R6_4;
  public static double R7_1;
  public static double R7_2;
  public static double R7_3;
  public static double R7_4;
  public static double R8_1;
  public static double R8_2;
  public static double R8_3;
  public static double R8_4;
  public static double R8_5;
  public static double R9_1;
  public static double R9_2;
  public static double R9_3;
  public static double R9_4;
  public static int ACTIVE;
  public static int POLY;
  public static int NWELL;
  public static int PWELL;
  public static int NSELECT;
  public static int PSELECT;
  public static int CONTACT;
  public static int VIA;
  public static int M1;
  public static int M2;
  public PartLib.M();
  static {};
}
Compiled from "MB.java"
public interface PartLib.MB {
  public static final int TECH_SCMOS;
  public static final int TECH_SUBM;
  public static final int TECH_DEEP;
  public static final double[][] rules;
  public static final int R1_1;
  public static final int R1_2;
  public static final int R1_3;
  public static final int R1_4;
  public static final int R2_1;
  public static final int R2_2;
  public static final int R2_3;
  public static final int R2_4;
  public static final int R2_5;
  public static final int R3_1;
  public static final int R3_2;
  public static final int R3_3;
  public static final int R3_4;
  public static final int R3_5;
  public static final int R4_1;
  public static final int R4_2;
  public static final int R4_3;
  public static final int R4_4;
  public static final int R5_1;
  public static final int R5_2;
  public static final int R5_3;
  public static final int R5_4;
  public static final int R6_1;
  public static final int R6_2;
  public static final int R6_3;
  public static final int R6_4;
  public static final int R7_1;
  public static final int R7_2;
  public static final int R7_3;
  public static final int R7_4;
  public static final int R8_1;
  public static final int R8_2;
  public static final int R8_3;
  public static final int R8_4;
  public static final int R8_5;
  public static final int R9_1;
  public static final int R9_2;
  public static final int R9_3;
  public static final int R9_4;
  public static final int ACITVE;
  public static final int POLY;
  public static final int NWELL;
  public static final int PWELL;
  public static final int CONTACT;
  public static final int VIA;
  public static final int M1;
  public static final int M2;
  static {};
}
Compiled from "MoParts.java"
public class PartLib.MoParts implements JGDS2.Const {
  public PartLib.MoParts();
  public static double l(double);
  public static java.lang.String l();
  public static java.lang.String ln();
  public static JGDS2.Struct buffer(double, double, int, int, double, int);
  public static JGDS2.Struct ringOsc(double, double, int);
  public static JGDS2.Struct inverter(double, double, int);
  public static JGDS2.Struct nFet(double, double, int);
  public static JGDS2.Struct bnFet(double, double, int);
  public static JGDS2.Struct pFet(double, double, int);
  public static JGDS2.Struct bpFet(double, double, int);
  public static JGDS2.Struct nCt();
  public static JGDS2.Struct pCt();
  public static JGDS2.Struct xCt(boolean);
  static java.lang.String type(boolean);
  static int well(boolean);
  static int select(boolean);
  public static JGDS2.Struct bxFet(double, double, int, boolean);
  public static JGDS2.Struct xFet(double, double, int, boolean);
  public static JGDS2.Struct cab(double);
  public static JGDS2.Struct cab(int);
  public static JGDS2.Struct cab(int, int);
  public static JGDS2.Struct cp();
  public static JGDS2.Struct ca();
  public static JGDS2.Struct Resistor(double, double, int, int);
  public static JGDS2.Struct bufOsc(double, double, int, double);
  public static JGDS2.Struct zero();
  public static JGDS2.Struct leads(double, double, boolean, boolean);
  public static JGDS2.Struct leads2(double, double, double);
  public static JGDS2.Struct leads3(double, double);
}
Compiled from "MuchText.java"
public class PartLib.MuchText$charP {
  java.awt.Font f;
  char c;
  double dx;
  double dy;
  JGDS2.Struct s;
  final PartLib.MuchText this$0;
  public PartLib.MuchText$charP(PartLib.MuchText, char, java.awt.Font);
  public void setCharStruct();
  public boolean equals(java.lang.Object);
}
Compiled from "MuchText.java"
public class PartLib.MuchText {
  static double scale;
  public static double scaleH;
  public PartLib.MuchText();
  public static JGDS2.Struct getStruct(java.lang.String);
  public static JGDS2.Struct structFor(PartLib.MuchText$charP);
  static {};
}
Compiled from "PartsLib.java"
public class PartLib.PartsLib implements JGDS2.Const,JGDS2.Constants {
  public PartLib.PartsLib();
  public static JGDS2.Struct Vern(int, int, double, int, java.lang.String, java.lang.String);
  public static JGDS2.Struct frame(int, java.lang.String, java.lang.String, java.lang.String);
  public static JGDS2.Struct frame(int, java.lang.String, java.lang.String, java.lang.String, boolean, boolean);
  public static JGDS2.Struct frame(int, java.lang.String[], java.lang.String[], java.lang.String, boolean, boolean);
  public static JGDS2.Struct frame(int, java.lang.String, java.lang.String, java.lang.String, boolean);
  static JGDS2.GArea arc(double, double, double, double, int);
  static JGDS2.Struct arcStruct(double, double, double, double, int);
  public static JGDS2.GArea torus(java.awt.geom.Point2D$Double, double, double, int, int);
  public static JGDS2.GArea torus(double, double, int, int);
  public static JGDS2.GArea circle(double, int, int);
}
Compiled from "ResoTest.java"
public class ResoTest implements JGDS2.Constants {
  public ResoTest();
  public static void main(java.lang.String[]);
  public static JGDS2.Struct lineWidth(int[], int[], double, boolean, boolean, boolean, double, int);
  public static JGDS2.Struct star(double, int, boolean, double);
}
Compiled from "angleGrate.java"
public class angleGrate implements JGDS2.Const {
  public angleGrate();
  public static void main(java.lang.String[]);
}
Compiled from "calOpt.java"
public class calOpt implements JGDS2.Const {
  public calOpt();
  public static void main(java.lang.String[]);
  JGDS2.Struct lable(JGDS2.Struct[], java.lang.String, double);
}
Compiled from "dbell.java"
public class dbell implements JGDS2.Const {
  public dbell();
  public static void main(java.lang.String[]);
  static JGDS2.Struct tree(double, double, double, int);
}
Compiled from "demo.java"
public class demo implements JGDS2.Constants {
  public demo();
  public static void main(java.lang.String[]);
  static JGDS2.GArea arc(double, double, double, double, int);
  static JGDS2.Struct arcStruct(double, double, double, double, int);
}
Compiled from "ebDots.java"
public class ebDots implements JGDS2.Const {
  public ebDots();
  public static void main(java.lang.String[]);
}
Compiled from "fidMatrix.java"
public class fidMatrix implements JGDS2.Constants {
  public fidMatrix();
  public static void main(java.lang.String[]);
  public static JGDS2.Struct lineWidth(double[], double[]);
  public static JGDS2.GArea torus(double, double);
  public static JGDS2.Struct star(double, int, boolean, double);
  public static JGDS2.Struct frame(int, java.lang.String, java.lang.String);
}
Compiled from "fracDemo.java"
public class fracDemo implements JGDS2.Const {
  public fracDemo();
  public static void main(java.lang.String[]);
  static JGDS2.Struct tree(double, double, double, int);
}
Compiled from "frameTestTest.java"
public class frameTestTest implements JGDS2.Constants {
  public frameTestTest();
  public static void main(java.lang.String[]);
  public static JGDS2.Struct lineWidth(int[], int[], double, boolean, boolean, boolean, double, int);
  public static JGDS2.GArea torus(double, double);
  public static JGDS2.Struct star(double, int, boolean, double);
  public static JGDS2.Struct frame(int, java.lang.String, java.lang.String);
}
Compiled from "lens.java"
public class lens implements JGDS2.Constants {
  static double lensRad;
  static double MaxRad;
  static double maxDose;
  static double minDose;
  static int NUMSTEPS;
  static double Lambda;
  static int DONE;
  static double maxError;
  static boolean goingDown;
  static boolean startDark;
  static int function;
  static final int lens;
  static final int blaze;
  public lens();
  static double resistHeight(double);
  static double stepRadius(double);
  static java.awt.geom.Path2D$Double isoline(double);
  static double[] zoneDepths();
  static JGDS2.Struct aLens();
  public static void main(java.lang.String[]);
  public static JGDS2.Struct lineWidth(int[], int[], double, boolean, boolean, double, int);
  public static JGDS2.GArea torus(double, double);
  public static JGDS2.Struct star(double, int);
  public static JGDS2.Struct frame(int, java.lang.String, java.lang.String);
  static {};
}
Compiled from "remote.java"
public class remote implements JGDS2.Const {
  public remote();
  public static void main(java.lang.String[]);
  static JGDS2.Struct grate(double);
}
Compiled from "spiral.java"
public class spiral implements JGDS2.Constants {
  public spiral();
  static JGDS2.Struct aLens();
  static JGDS2.Struct sprl();
  static JGDS2.Struct na();
  static double fX(double, double);
  static double fY(double, double);
  public static void main(java.lang.String[]);
}
Compiled from "testFonts.java"
public class testFonts {
  public testFonts();
  public static void main(java.lang.String[]);
  static JGDS2.Struct TestTop();
}
Compiled from "testMoreText.java"
public class testMoreText implements JGDS2.Const {
  public testMoreText();
  public static void main(java.lang.String[]);
}
